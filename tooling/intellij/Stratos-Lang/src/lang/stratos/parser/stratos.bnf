{
    // Name and the location of the parser which will be generated.
    parserClass="lang.stratos.parser.StratosParser"

    // All nodes will extend this class. This wraps AST node to a PSI node.
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    // Prefix for all generated classes.
    psiClassPrefix="Stratos"
    // Suffix for implementation classes.
    psiImplClassSuffix="Impl"

    // Location to be used when generating PSI classes.
    psiPackage="lang.stratos.psi"
    // Location to be used when generating PSI implementation classes.
    psiImplPackage="lang.stratos.psi.impl"

    // Element type holder class name. This class will be used extensively throughout the tutorial.
    elementTypeHolderClass="lang.stratos.psi.StratosTypes"

    // Class which will be used to create internal nodes.
    elementTypeClass="lang.stratos.psi.StratosElementType"
    // Class which will be used to create leaf nodes.
    tokenTypeClass="lang.stratos.psi.StratosTokenType"

    tokens = [
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
    ]
}

StratosFile ::= Definition*

Definition ::= PackageDefinition | (EnumType)+ | (StructType)+ | (FunctionDefinition)+

PackageDefinition ::= TypePackage IDENTIFIER* ';'

TypePackage  ::= package

FunctionDefinition ::= function IDENTIFIER '(' ')' (returns Type)? '{' FunctionBody '}'

FunctionBody ::= Statement*

Statement ::= VariableDefinition | AssignmentStatement | FunctionInvocation | EnumType | StructType

VariableDefinition ::= Type IDENTIFIER (';' | ('=' (FunctionInvocation | IDENTIFIER* ))?)

BasicVariableDefinition ::= Type IDENTIFIER (';' | ('='  IDENTIFIER* )?)

EnumType ::= TypeWrapper IDENTIFIER '{'  (IDENTIFIER ','? )* '}'

StructType ::= TypeWrapper IDENTIFIER '{' BasicVariableDefinition* '}'

Type ::= int | string | number | double

TypeWrapper ::= enum | struct

AssignmentStatement ::= IDENTIFIER '=' FunctionInvocation

FunctionInvocation ::= IDENTIFIER '(' ')' ';'?