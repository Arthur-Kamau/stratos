/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package lang.stratos.lexer; // Package which will be the lexer generation location.
//
import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import lang.stratos.language.StratosTokenType;
import static com.intellij.psi.TokenType.BAD_CHARACTER; // Pre-defined bad character token.
import static com.intellij.psi.TokenType.WHITE_SPACE; // Pre-defined whitespace character token.
import static lang.stratos.psi.StratosTypes.*; // Note that is the class which is specified as `elementTypeHolderClass`
// in bnf grammar file. This will contain all other tokens which we will use.


@SuppressWarnings("DuplicateBranchesInSwitch")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>stratos.flex</tt>
 */
class _StratosLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT_STATE = 2;
  public static final int QUO_STRING = 4;
  public static final int THREE_QUO_STRING = 6;
  public static final int APOS_STRING = 8;
  public static final int THREE_APOS_STRING = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\10\1\0\1\5\23\0\1\5\1\7\1\14\1\6\1\16\1\52\1\0\1\15\1\62\1\63"+
    "\1\12\1\53\1\0\1\23\1\20\1\11\1\24\11\1\1\57\1\60\1\55\1\56\1\54\1\0\1\61"+
    "\4\2\1\21\1\2\21\3\1\26\2\3\1\0\1\65\2\0\1\3\1\0\1\30\1\33\1\40\1\4\1\22\1"+
    "\35\1\46\1\51\1\41\1\3\1\34\1\44\1\47\1\37\1\42\1\45\1\3\1\13\1\31\1\32\1"+
    "\36\1\64\1\50\1\25\1\43\1\3\1\17\1\0\1\27\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\0\1\2\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\2\1\11\1\12\1\13\2\2"+
    "\1\14\1\3\1\15\15\2\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\3\30"+
    "\1\1\1\31\1\32\1\33\1\2\1\1\2\2\1\1"+
    "\1\2\1\1\1\2\2\34\1\5\1\35\1\36\1\0"+
    "\1\3\1\0\2\37\1\40\2\41\3\0\1\3\3\0"+
    "\1\3\1\42\10\0\1\43\1\44\10\0\1\45\1\0"+
    "\1\46\1\47\1\0\1\50\1\51\1\52\1\0\1\1"+
    "\2\0\1\34\1\3\1\0\1\53\1\54\4\41\1\0"+
    "\1\55\1\56\14\0\1\57\3\0\1\60\1\0\1\61"+
    "\1\0\1\62\1\63\1\34\1\0\1\53\1\64\1\0"+
    "\1\41\2\65\2\0\1\66\1\67\4\0\1\70\1\0"+
    "\1\71\2\0\1\72\5\0\1\73\1\74\6\0\1\75"+
    "\2\0\1\76\1\77\4\0\1\100\1\0\1\101\4\0"+
    "\1\102\1\103\1\104\1\0\1\105\3\0\1\65\1\106"+
    "\1\107\3\0\1\110\1\111\1\0\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u01b0\0\u02be\0\u01b0"+
    "\0\u02f4\0\u032a\0\u0360\0\u01b0\0\u0396\0\u03cc\0\u01b0\0\u0402"+
    "\0\u01b0\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u06f6\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u072c\0\u01b0\0\u0762\0\u0798\0\u07ce\0\u01b0\0\u01b0\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u01b0\0\u01b0\0\u01b0\0\u0396\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u01b0\0\u01b0"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u01b0\0\u1116\0\u01b0\0\u01b0\0\u083a\0\u114c\0\u01b0\0\u01b0"+
    "\0\u1182\0\u01b0\0\u0948\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u01b0\0\u01b0"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u01b0\0\u1692\0\u16c8\0\u16fe"+
    "\0\u01b0\0\u1734\0\u01b0\0\u176a\0\u01b0\0\u01b0\0\u17a0\0\u17d6"+
    "\0\u180c\0\u01b0\0\u12c6\0\u01b0\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u01b0\0\u01b0\0\u191a\0\u1950\0\u1986\0\u19bc\0\u01b0\0\u19f2"+
    "\0\u01b0\0\u1a28\0\u1a5e\0\u01b0\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u01b0\0\u09ea\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u01b0\0\u1ce6\0\u1d1c\0\u01b0\0\u01b0\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u01b0\0\u1e2a\0\u01b0\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u01b0\0\u01b0\0\u01b0\0\u1f38\0\u01b0\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u01b0\0\u01b0\0\u01b0\0\u2010\0\u2046\0\u207c\0\u01b0"+
    "\0\u01b0\0\u20b2\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\2\11\1\13\1\14\1\15\1\16\1\14"+
    "\1\17\1\20\1\21\1\22\1\23\1\11\1\24\1\25"+
    "\1\11\1\26\1\27\1\30\2\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\36\1\37\2\11\1\40\1\41"+
    "\1\42\1\43\1\44\1\11\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\11\11\62\1\63\1\64\53\62\10\65"+
    "\1\66\3\65\1\67\1\65\1\70\46\65\1\71\14\72"+
    "\1\73\1\72\1\70\46\72\1\74\10\75\1\66\4\75"+
    "\1\67\1\70\46\75\1\76\15\77\1\100\1\70\46\77"+
    "\1\74\2\11\3\101\6\11\1\101\5\11\2\101\2\11"+
    "\2\101\1\11\2\101\1\102\17\101\12\11\1\101\2\11"+
    "\1\12\2\11\1\13\1\14\1\103\1\16\1\14\1\17"+
    "\1\20\1\21\1\22\1\23\1\11\1\104\1\25\1\11"+
    "\1\26\1\27\1\30\2\11\1\105\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\2\11\1\40\1\41\1\42"+
    "\1\43\1\44\1\11\1\45\1\46\1\11\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\11\67\0\1\12\16\0\1\106\2\107\1\0"+
    "\1\12\103\0\1\110\30\0\1\14\2\0\1\14\64\0"+
    "\1\111\67\0\1\112\1\113\67\0\1\114\1\115\4\0"+
    "\1\116\57\0\1\117\66\0\1\120\51\0\1\121\22\0"+
    "\1\121\66\0\1\122\11\0\1\123\4\0\1\124\22\0"+
    "\1\12\16\0\1\106\2\107\1\0\1\12\2\125\70\0"+
    "\1\126\12\0\1\127\53\0\1\130\46\0\1\131\65\0"+
    "\1\132\26\0\1\133\53\0\1\134\5\0\1\135\66\0"+
    "\1\136\57\0\1\137\3\0\1\140\1\0\1\141\7\0"+
    "\1\142\102\0\1\143\23\0\1\144\65\0\1\145\73\0"+
    "\1\146\73\0\1\147\100\0\1\150\72\0\1\151\37\0"+
    "\1\152\47\0\1\153\64\0\1\154\54\0\10\65\1\0"+
    "\3\65\1\0\1\65\1\0\46\65\1\155\2\0\3\156"+
    "\6\0\1\156\3\0\1\157\1\0\2\156\2\0\2\156"+
    "\1\0\22\156\12\0\1\156\1\0\10\65\1\0\55\65"+
    "\14\72\1\0\1\72\1\0\46\72\1\0\14\160\1\161"+
    "\51\160\66\162\10\75\1\0\4\75\2\0\46\75\1\163"+
    "\10\75\1\0\55\75\15\77\2\0\46\77\1\0\15\160"+
    "\1\164\50\160\1\0\4\101\6\0\1\101\5\0\2\101"+
    "\1\0\3\101\1\0\22\101\12\0\1\101\2\0\4\101"+
    "\6\0\1\101\5\0\2\101\1\0\3\101\1\0\21\101"+
    "\1\165\12\0\1\101\2\0\1\166\21\0\2\166\26\0"+
    "\1\166\50\0\1\167\27\0\10\111\1\0\65\111\1\0"+
    "\1\170\54\111\12\0\1\171\53\0\10\172\1\0\3\172"+
    "\1\173\51\172\10\174\1\0\4\174\1\175\50\174\32\0"+
    "\1\176\47\0\1\177\66\0\1\200\51\0\1\121\17\0"+
    "\2\107\1\0\1\121\73\0\1\201\71\0\1\202\60\0"+
    "\1\203\35\0\2\125\1\0\1\125\14\0\2\125\1\0"+
    "\1\125\3\0\1\125\2\0\1\125\1\0\1\125\2\0"+
    "\1\125\56\0\1\204\75\0\1\205\37\0\1\206\110\0"+
    "\1\207\51\0\1\210\105\0\1\211\67\0\1\212\60\0"+
    "\1\213\67\0\1\214\56\0\1\215\100\0\1\216\42\0"+
    "\1\217\104\0\1\220\56\0\1\221\73\0\1\222\57\0"+
    "\1\223\55\0\1\224\56\0\1\225\30\0\1\226\22\0"+
    "\4\156\6\0\1\156\5\0\2\156\1\0\3\156\1\0"+
    "\22\156\12\0\1\156\1\0\14\160\1\67\66\160\1\67"+
    "\50\160\1\0\4\101\6\0\1\101\5\0\2\101\1\0"+
    "\3\101\1\0\11\101\1\227\10\101\12\0\1\101\2\0"+
    "\1\166\22\0\1\166\74\0\1\230\32\0\10\231\1\0"+
    "\1\111\54\231\11\0\1\232\1\233\53\0\10\172\1\0"+
    "\3\172\1\234\51\172\14\0\1\235\51\0\10\174\1\0"+
    "\4\174\1\234\50\174\15\0\1\236\106\0\1\237\51\0"+
    "\1\240\112\0\1\241\40\0\1\242\65\0\1\243\73\0"+
    "\1\244\73\0\1\245\2\0\1\246\46\0\1\247\73\0"+
    "\1\250\101\0\1\251\52\0\1\252\74\0\1\253\57\0"+
    "\1\254\75\0\1\255\1\0\1\256\34\0\1\257\116\0"+
    "\1\260\55\0\1\261\70\0\1\262\27\0\4\101\6\0"+
    "\1\101\5\0\2\101\1\0\3\101\1\0\1\101\1\263"+
    "\20\101\12\0\1\101\45\0\1\264\21\0\10\231\1\0"+
    "\55\231\14\235\1\265\51\235\15\236\1\266\50\236\13\0"+
    "\1\267\111\0\1\270\41\0\1\271\103\0\1\272\74\0"+
    "\1\273\64\0\1\274\62\0\1\275\53\0\1\276\75\0"+
    "\1\277\46\0\1\300\74\0\1\301\56\0\1\302\56\0"+
    "\1\303\111\0\1\304\57\0\1\305\43\0\14\235\1\306"+
    "\51\235\15\236\1\307\50\236\37\0\1\310\32\0\1\311"+
    "\113\0\1\312\65\0\1\313\101\0\1\314\60\0\1\315"+
    "\56\0\1\316\102\0\1\317\57\0\1\320\72\0\1\321"+
    "\17\0\14\235\1\322\51\235\15\236\1\322\50\236\31\0"+
    "\1\323\65\0\1\324\76\0\1\325\45\0\1\326\47\0"+
    "\1\327\103\0\1\330\102\0\1\331\65\0\1\332\50\0"+
    "\1\333\75\0\1\334\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\0\1\11\4\1\1\11\1\1\1\11"+
    "\3\1\1\11\2\1\1\11\1\1\1\11\15\1\4\11"+
    "\1\1\5\11\1\1\1\11\3\1\2\11\13\1\3\11"+
    "\1\0\1\1\1\0\5\1\3\0\1\1\3\0\2\1"+
    "\10\0\2\11\10\0\1\11\1\0\2\11\1\0\1\1"+
    "\2\11\1\0\1\11\2\0\2\1\1\0\6\1\1\0"+
    "\2\11\14\0\1\11\3\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\1\1\0\1\1\1\11\1\0\1\11\2\1"+
    "\2\0\2\11\4\0\1\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\1\6\0\1\11\2\0\2\11\4\0"+
    "\1\11\1\0\1\11\4\0\3\11\1\0\1\11\3\0"+
    "\3\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
      this.state = state;
      this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
      return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();
  protected int myLeftBraceCount;

  private void pushState(int state) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  _StratosLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _StratosLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      myLeftBraceCount = 0;
  myStateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return REGULAR_STRING_PART;
            } 
            // fall through
          case 76: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 78: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 5: 
            { return HASH;
            } 
            // fall through
          case 80: break;
          case 6: 
            { return NOT;
            } 
            // fall through
          case 81: break;
          case 7: 
            { return DIVIDE;
            } 
            // fall through
          case 82: break;
          case 8: 
            { return MULTIPLY;
            } 
            // fall through
          case 83: break;
          case 9: 
            { pushState(QUO_STRING);        return OPEN_QUOTE;
            } 
            // fall through
          case 84: break;
          case 10: 
            { pushState(APOS_STRING);       return OPEN_QUOTE;
            } 
            // fall through
          case 85: break;
          case 11: 
            { return OPEN_BRACKETS;
            } 
            // fall through
          case 86: break;
          case 12: 
            { return MINUS;
            } 
            // fall through
          case 87: break;
          case 13: 
            { return CLOSE_BRACKETS;
            } 
            // fall through
          case 88: break;
          case 14: 
            { return MODULAS;
            } 
            // fall through
          case 89: break;
          case 15: 
            { return ADD;
            } 
            // fall through
          case 90: break;
          case 16: 
            { return GREATER_THAN;
            } 
            // fall through
          case 91: break;
          case 17: 
            { return LESS_THAN;
            } 
            // fall through
          case 92: break;
          case 18: 
            { return ASSIGN;
            } 
            // fall through
          case 93: break;
          case 19: 
            { return COLON;
            } 
            // fall through
          case 94: break;
          case 20: 
            { return SEMI_COLON;
            } 
            // fall through
          case 95: break;
          case 21: 
            { return AT;
            } 
            // fall through
          case 96: break;
          case 22: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 97: break;
          case 23: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 98: break;
          case 24: 
            { return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 99: break;
          case 25: 
            { popState();                   return WHITE_SPACE;
            } 
            // fall through
          case 100: break;
          case 26: 
            { popState();                   return CLOSING_QUOTE;
            } 
            // fall through
          case 101: break;
          case 27: 
            { return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 102: break;
          case 28: 
            { popState(); return IDENTIFIER;
            } 
            // fall through
          case 103: break;
          case 29: 
            { myLeftBraceCount++; return CLOSE_BRACKETS;
            } 
            // fall through
          case 104: break;
          case 30: 
            { if (myLeftBraceCount == 0) {
                                     popState();
                                     return LONG_TEMPLATE_ENTRY_END;
                                   }
                                   myLeftBraceCount--;
                                   return OPEN_BRACKETS;
            } 
            // fall through
          case 105: break;
          case 31: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 106: break;
          case 32: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
            } 
            // fall through
          case 107: break;
          case 33: 
            { return RAW_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 108: break;
          case 34: 
            { return AS;
            } 
            // fall through
          case 109: break;
          case 35: 
            { return IS;
            } 
            // fall through
          case 110: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 111: break;
          case 37: 
            { return EQUAL;
            } 
            // fall through
          case 112: break;
          case 38: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 113: break;
          case 39: 
            { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE
                                                                                                               ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                                                               : MULTI_LINE_COMMENT_END;
            } 
            // fall through
          case 114: break;
          case 40: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                                                             yypushback(yylength() - 1);
                                                                                             return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 115: break;
          case 41: 
            { pushState(LONG_TEMPLATE_ENTRY);
                                                                                             return LONG_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 116: break;
          case 42: 
            { yypushback(1); return REGULAR_STRING_PART;
            } 
            // fall through
          case 117: break;
          case 43: 
            { return SINGLE_LINE_DOC_COMMENT;
            } 
            // fall through
          case 118: break;
          case 44: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_DOC_COMMENT_START;
            } 
            // fall through
          case 119: break;
          case 45: 
            { pushState(THREE_QUO_STRING);  return OPEN_QUOTE;
            } 
            // fall through
          case 120: break;
          case 46: 
            { pushState(THREE_APOS_STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 121: break;
          case 47: 
            { return INT;
            } 
            // fall through
          case 122: break;
          case 48: 
            { return LET;
            } 
            // fall through
          case 123: break;
          case 49: 
            { return MUTABLE;
            } 
            // fall through
          case 124: break;
          case 50: 
            { return VARIABLE;
            } 
            // fall through
          case 125: break;
          case 51: 
            { return VALUE;
            } 
            // fall through
          case 126: break;
          case 52: 
            { return MULTI_LINE_COMMENT;
            } 
            // fall through
          case 127: break;
          case 53: 
            { return RAW_TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 128: break;
          case 54: 
            { return ENUM;
            } 
            // fall through
          case 129: break;
          case 55: 
            { return ELSE;
            } 
            // fall through
          case 130: break;
          case 56: 
            { return TRUE;
            } 
            // fall through
          case 131: break;
          case 57: 
            { return BOOL;
            } 
            // fall through
          case 132: break;
          case 58: 
            { return UNIT;
            } 
            // fall through
          case 133: break;
          case 59: 
            { return WHEN;
            } 
            // fall through
          case 134: break;
          case 60: 
            { popState(); return THIS;
            } 
            // fall through
          case 135: break;
          case 61: 
            { return ALIAS;
            } 
            // fall through
          case 136: break;
          case 62: 
            { return BREAK;
            } 
            // fall through
          case 137: break;
          case 63: 
            { return FALSE;
            } 
            // fall through
          case 138: break;
          case 64: 
            { return YIELD;
            } 
            // fall through
          case 139: break;
          case 65: 
            { return DOUBLE;
            } 
            // fall through
          case 140: break;
          case 66: 
            { return ASSERT;
            } 
            // fall through
          case 141: break;
          case 67: 
            { return STRUCT;
            } 
            // fall through
          case 142: break;
          case 68: 
            { return STRING;
            } 
            // fall through
          case 143: break;
          case 69: 
            { return IMPORT;
            } 
            // fall through
          case 144: break;
          case 70: 
            { return RETURNS;
            } 
            // fall through
          case 145: break;
          case 71: 
            { return EXTENDS;
            } 
            // fall through
          case 146: break;
          case 72: 
            { return PACKAGE;
            } 
            // fall through
          case 147: break;
          case 73: 
            { return FUNCTION;
            } 
            // fall through
          case 148: break;
          case 74: 
            { return OVERRIDE;
            } 
            // fall through
          case 149: break;
          case 75: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
