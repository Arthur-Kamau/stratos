/* The following code was generated by JFlex 1.7.0 */


package lang.stratos.grammer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER; // Pre-defined bad character token.
import static com.intellij.psi.TokenType.WHITE_SPACE; // Pre-defined whitespace character token.
//import static lang.stratos.grammer.StratosTypes; // Note that is the class which is specified as `elementTypeHolderClass`
import static lang.stratos.grammer.StratosTypes.*;
// in bnf grammar file. This will contain all other tokens which we will use.


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>stratos.flex</tt>
 */
public class StratosLexer implements FlexLexer {// Name of the super class. {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\5\3\22\0\1\3\1\52\1\0\1\65\1\0\1\51\1\63"+
    "\1\0\1\40\1\41\1\47\1\45\1\56\1\43\1\54\1\46\12\2"+
    "\1\57\1\42\1\60\1\44\1\53\1\55\1\64\32\1\1\36\1\0"+
    "\1\37\1\62\1\1\1\0\1\21\1\22\1\7\1\26\1\14\1\4"+
    "\1\16\1\24\1\11\1\1\1\23\1\25\1\27\1\6\1\12\1\33"+
    "\1\35\1\13\1\15\1\10\1\5\1\34\1\32\1\30\1\31\1\1"+
    "\1\17\1\61\1\20\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\12\2\1\4\1\5\12\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\15\2\1\36\1\37\1\40\1\2\1\41\1\42\14\2"+
    "\1\43\6\2\1\44\10\2\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\2\2\1\72\3\2\1\73\7\2\1\74\3\2"+
    "\1\75\13\2\1\76\3\2\1\77\17\2\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\4\2\1\110"+
    "\5\2\1\111\1\2\1\112\1\113\10\2\1\114\1\115"+
    "\5\2\1\116\1\117\6\2\1\120\1\2\1\121\4\2"+
    "\1\122\1\2\1\123\1\124\1\125\1\2\1\126\1\2"+
    "\1\127\2\2\1\130\1\2\1\131\1\132\1\133\12\2"+
    "\1\134\4\2\1\135\1\2\1\136\1\137\3\2\1\140"+
    "\1\141\1\142\3\2\1\143\3\2\1\144\2\2\1\145"+
    "\5\2\1\146\1\147\1\150\1\151\1\152\5\2\1\153"+
    "\1\154\2\2\1\155\2\2\1\156\1\157\2\2\1\160"+
    "\2\2\1\161\1\2\1\162\1\163\1\164\2\2\1\165"+
    "\1\166\1\2\1\167\1\170\1\171\1\172\1\2\1\173"+
    "\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\66\0\66"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\66\0\66\0\66\0\66\0\66\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\66"+
    "\0\u06c0\0\u06f6\0\66\0\66\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\66\0\66\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\154"+
    "\0\u0ac2\0\154\0\u0af8\0\154\0\154\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\154\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u10e0\0\66\0\66\0\u1116\0\u114c\0\u1182\0\66"+
    "\0\u11b8\0\66\0\u11ee\0\66\0\66\0\u1224\0\u125a\0\u1290"+
    "\0\154\0\u12c6\0\u12fc\0\u1332\0\154\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\154\0\u14e2\0\u1518\0\u154e"+
    "\0\154\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\154\0\u17d6\0\u180c\0\u1842"+
    "\0\154\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\154\0\66\0\u1ba2\0\66\0\66\0\66\0\66\0\66"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\154\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\154\0\u1dbe\0\154\0\154\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\154\0\154"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\154\0\154\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\154\0\u21f6\0\154"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\154\0\u2304\0\154\0\154"+
    "\0\66\0\u233a\0\u2370\0\u23a6\0\154\0\u23dc\0\u2412\0\154"+
    "\0\u2448\0\154\0\154\0\154\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\154\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\154\0\u2772\0\154\0\154\0\u27a8"+
    "\0\u27de\0\u2814\0\154\0\154\0\154\0\u284a\0\u2880\0\u28b6"+
    "\0\154\0\u28ec\0\u2922\0\u2958\0\154\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\154\0\154\0\154"+
    "\0\154\0\154\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\154"+
    "\0\154\0\u2c4c\0\u2c82\0\154\0\u2cb8\0\u2cee\0\154\0\154"+
    "\0\u2d24\0\u2d5a\0\154\0\u2d90\0\u2dc6\0\154\0\u2dfc\0\154"+
    "\0\154\0\154\0\u2e32\0\u2e68\0\154\0\154\0\u2e9e\0\154"+
    "\0\154\0\154\0\154\0\u2ed4\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\3\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\67\0\2\3"+
    "\1\0\13\3\2\0\15\3\33\0\1\4\63\0\2\3"+
    "\1\0\1\3\1\63\3\3\1\64\1\65\4\3\2\0"+
    "\1\66\14\3\31\0\2\3\1\0\1\3\1\67\6\3"+
    "\1\70\2\3\2\0\1\71\14\3\31\0\2\3\1\0"+
    "\6\3\1\72\4\3\2\0\1\73\3\3\1\74\10\3"+
    "\31\0\2\3\1\0\7\3\1\75\3\3\2\0\3\3"+
    "\1\76\4\3\1\77\4\3\31\0\2\3\1\0\1\100"+
    "\1\3\1\101\6\3\1\102\1\3\2\0\6\3\1\103"+
    "\6\3\31\0\2\3\1\0\1\104\1\3\1\105\10\3"+
    "\2\0\12\3\1\106\2\3\31\0\2\3\1\0\10\3"+
    "\1\107\2\3\2\0\15\3\31\0\2\3\1\0\2\3"+
    "\1\110\10\3\2\0\4\3\1\111\2\3\1\112\5\3"+
    "\31\0\2\3\1\0\1\3\1\113\2\3\1\114\3\3"+
    "\1\115\2\3\2\0\3\3\1\116\4\3\1\117\1\120"+
    "\3\3\31\0\2\3\1\0\10\3\1\121\2\3\2\0"+
    "\15\3\31\0\2\3\1\0\11\3\1\122\1\3\2\0"+
    "\1\3\1\123\7\3\1\124\3\3\31\0\2\3\1\0"+
    "\7\3\1\125\3\3\2\0\15\3\31\0\2\3\1\0"+
    "\5\3\1\126\5\3\2\0\15\3\31\0\2\3\1\0"+
    "\5\3\1\127\5\3\2\0\1\130\14\3\31\0\2\3"+
    "\1\0\6\3\1\131\1\3\1\132\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\133\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\134\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\135\5\3\2\0\3\3"+
    "\1\136\11\3\31\0\2\3\1\0\13\3\2\0\1\137"+
    "\14\3\31\0\2\3\1\0\6\3\1\140\4\3\2\0"+
    "\1\141\14\3\73\0\1\142\1\143\65\0\1\144\6\0"+
    "\1\145\56\0\1\146\1\147\64\0\1\150\65\0\1\151"+
    "\67\0\1\152\63\0\1\153\65\0\1\154\75\0\1\155"+
    "\65\0\1\156\1\157\54\0\1\160\13\0\1\161\51\0"+
    "\1\162\14\0\1\163\50\0\1\164\65\0\1\165\16\0"+
    "\1\166\3\0\2\3\1\0\2\3\1\167\10\3\2\0"+
    "\15\3\31\0\2\3\1\0\2\3\1\170\10\3\2\0"+
    "\15\3\31\0\2\3\1\0\7\3\1\171\3\3\2\0"+
    "\15\3\31\0\2\3\1\0\3\3\1\172\7\3\2\0"+
    "\4\3\1\173\10\3\31\0\2\3\1\0\13\3\2\0"+
    "\4\3\1\174\10\3\31\0\2\3\1\0\13\3\2\0"+
    "\11\3\1\175\3\3\31\0\2\3\1\0\4\3\1\176"+
    "\6\3\2\0\15\3\31\0\2\3\1\0\2\3\1\177"+
    "\10\3\2\0\13\3\1\200\1\3\31\0\2\3\1\0"+
    "\4\3\1\201\4\3\1\202\1\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\1\203\14\3\31\0\2\3"+
    "\1\0\1\3\1\204\11\3\2\0\10\3\1\205\4\3"+
    "\31\0\2\3\1\0\5\3\1\206\1\3\1\207\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\12\3"+
    "\1\210\2\3\31\0\2\3\1\0\4\3\1\211\6\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\12\3"+
    "\1\212\2\3\31\0\2\3\1\0\10\3\1\213\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\4\3\1\214\6\3"+
    "\2\0\14\3\1\215\31\0\2\3\1\0\1\3\1\216"+
    "\11\3\2\0\15\3\31\0\2\3\1\0\11\3\1\217"+
    "\1\3\2\0\15\3\31\0\2\3\1\0\4\3\1\220"+
    "\6\3\2\0\12\3\1\221\2\3\31\0\2\3\1\0"+
    "\13\3\2\0\12\3\1\222\2\3\31\0\2\3\1\0"+
    "\7\3\1\223\3\3\2\0\1\224\14\3\31\0\2\3"+
    "\1\0\4\3\1\225\6\3\2\0\15\3\31\0\2\3"+
    "\1\0\6\3\1\226\4\3\2\0\15\3\31\0\2\3"+
    "\1\0\2\3\1\227\10\3\2\0\15\3\31\0\2\3"+
    "\1\0\5\3\1\230\5\3\2\0\15\3\31\0\2\3"+
    "\1\0\4\3\1\231\6\3\2\0\15\3\31\0\2\3"+
    "\1\0\11\3\1\232\1\3\2\0\10\3\1\233\4\3"+
    "\31\0\2\3\1\0\11\3\1\234\1\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\1\235\14\3\31\0"+
    "\2\3\1\0\10\3\1\236\2\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\5\3\1\237\7\3\31\0"+
    "\2\3\1\0\13\3\2\0\1\3\1\240\13\3\31\0"+
    "\2\3\1\0\4\3\1\241\6\3\2\0\15\3\31\0"+
    "\2\3\1\0\1\242\12\3\2\0\15\3\31\0\2\3"+
    "\1\0\13\3\2\0\7\3\1\243\5\3\31\0\2\3"+
    "\1\0\10\3\1\244\2\3\2\0\15\3\31\0\2\3"+
    "\1\0\4\3\1\245\6\3\2\0\15\3\31\0\2\3"+
    "\1\0\5\3\1\246\5\3\2\0\15\3\31\0\2\3"+
    "\1\0\7\3\1\247\3\3\2\0\15\3\31\0\2\3"+
    "\1\0\5\3\1\250\5\3\2\0\15\3\31\0\2\3"+
    "\1\0\7\3\1\251\3\3\2\0\15\3\74\0\1\252"+
    "\75\0\1\253\65\0\1\254\55\0\1\255\65\0\1\256"+
    "\65\0\1\257\65\0\1\260\22\0\2\3\1\0\3\3"+
    "\1\261\7\3\2\0\15\3\31\0\2\3\1\0\13\3"+
    "\2\0\1\262\14\3\31\0\2\3\1\0\4\3\1\263"+
    "\6\3\2\0\15\3\31\0\2\3\1\0\11\3\1\264"+
    "\1\3\2\0\15\3\31\0\2\3\1\0\13\3\2\0"+
    "\4\3\1\265\10\3\31\0\2\3\1\0\5\3\1\266"+
    "\5\3\2\0\15\3\31\0\2\3\1\0\4\3\1\267"+
    "\4\3\1\270\1\3\2\0\15\3\31\0\2\3\1\0"+
    "\13\3\2\0\1\271\14\3\31\0\2\3\1\0\3\3"+
    "\1\272\7\3\2\0\15\3\31\0\2\3\1\0\10\3"+
    "\1\273\2\3\2\0\15\3\31\0\2\3\1\0\11\3"+
    "\1\274\1\3\2\0\15\3\31\0\2\3\1\0\10\3"+
    "\1\275\2\3\2\0\15\3\31\0\2\3\1\0\11\3"+
    "\1\276\1\3\2\0\15\3\31\0\2\3\1\0\6\3"+
    "\1\277\4\3\2\0\15\3\31\0\2\3\1\0\10\3"+
    "\1\300\2\3\2\0\15\3\31\0\2\3\1\0\6\3"+
    "\1\301\4\3\2\0\4\3\1\302\10\3\31\0\2\3"+
    "\1\0\7\3\1\303\3\3\2\0\15\3\31\0\2\3"+
    "\1\0\1\3\1\304\11\3\2\0\3\3\1\305\11\3"+
    "\31\0\2\3\1\0\1\3\1\306\11\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\6\3\1\307\6\3"+
    "\31\0\2\3\1\0\10\3\1\310\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\10\3\1\311\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\6\3\1\312\4\3\2\0\15\3"+
    "\31\0\2\3\1\0\10\3\1\313\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\314\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\4\3\1\315\6\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\11\3\1\316\3\3"+
    "\31\0\2\3\1\0\3\3\1\317\7\3\2\0\15\3"+
    "\31\0\2\3\1\0\4\3\1\320\6\3\2\0\15\3"+
    "\31\0\2\3\1\0\10\3\1\321\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\2\3\1\322\10\3\2\0\15\3"+
    "\31\0\2\3\1\0\4\3\1\323\6\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\324\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\1\325\14\3\31\0"+
    "\2\3\1\0\10\3\1\326\2\3\2\0\15\3\31\0"+
    "\2\3\1\0\7\3\1\327\3\3\2\0\15\3\31\0"+
    "\2\3\1\0\10\3\1\330\2\3\2\0\15\3\31\0"+
    "\2\3\1\0\10\3\1\331\2\3\2\0\1\332\14\3"+
    "\31\0\2\3\1\0\5\3\1\333\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\4\3\1\334\10\3"+
    "\31\0\2\3\1\0\13\3\2\0\3\3\1\335\11\3"+
    "\31\0\2\3\1\0\13\3\2\0\4\3\1\336\10\3"+
    "\31\0\2\3\1\0\4\3\1\337\6\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\5\3\1\340\7\3"+
    "\105\0\1\341\11\0\2\3\1\0\4\3\1\342\6\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\4\3"+
    "\1\343\10\3\31\0\2\3\1\0\6\3\1\344\4\3"+
    "\2\0\15\3\31\0\2\3\1\0\10\3\1\345\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\13\3"+
    "\1\346\1\3\31\0\2\3\1\0\5\3\1\347\5\3"+
    "\2\0\15\3\31\0\2\3\1\0\4\3\1\350\6\3"+
    "\2\0\15\3\31\0\2\3\1\0\7\3\1\351\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\3\3"+
    "\1\352\11\3\31\0\2\3\1\0\11\3\1\353\1\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\11\3"+
    "\1\354\3\3\31\0\2\3\1\0\13\3\2\0\5\3"+
    "\1\355\7\3\31\0\2\3\1\0\7\3\1\356\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\10\3\1\357\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\1\360"+
    "\14\3\31\0\2\3\1\0\7\3\1\361\3\3\2\0"+
    "\15\3\31\0\2\3\1\0\7\3\1\362\3\3\2\0"+
    "\15\3\31\0\2\3\1\0\5\3\1\363\5\3\2\0"+
    "\15\3\31\0\2\3\1\0\2\3\1\364\4\3\1\365"+
    "\3\3\2\0\15\3\31\0\2\3\1\0\7\3\1\366"+
    "\3\3\2\0\15\3\31\0\2\3\1\0\7\3\1\367"+
    "\3\3\2\0\15\3\31\0\2\3\1\0\2\3\1\370"+
    "\10\3\2\0\15\3\31\0\2\3\1\0\5\3\1\371"+
    "\5\3\2\0\15\3\31\0\2\3\1\0\3\3\1\372"+
    "\7\3\2\0\15\3\31\0\2\3\1\0\7\3\1\373"+
    "\3\3\2\0\15\3\31\0\2\3\1\0\3\3\1\374"+
    "\7\3\2\0\15\3\31\0\2\3\1\0\7\3\1\375"+
    "\3\3\2\0\15\3\31\0\2\3\1\0\4\3\1\376"+
    "\6\3\2\0\15\3\31\0\2\3\1\0\13\3\2\0"+
    "\2\3\1\377\12\3\31\0\2\3\1\0\13\3\2\0"+
    "\1\u0100\14\3\31\0\2\3\1\0\7\3\1\u0101\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\1\3\1\u0102\11\3"+
    "\2\0\15\3\31\0\2\3\1\0\2\3\1\u0103\10\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\5\3"+
    "\1\u0104\7\3\31\0\2\3\1\0\10\3\1\u0105\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\5\3\1\u0106\5\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\4\3"+
    "\1\u0107\10\3\31\0\2\3\1\0\7\3\1\u0108\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\10\3\1\u0109\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\2\3\1\u010a\10\3"+
    "\2\0\15\3\31\0\2\3\1\0\5\3\1\u010b\5\3"+
    "\2\0\15\3\31\0\2\3\1\0\10\3\1\u010c\2\3"+
    "\2\0\15\3\31\0\2\3\1\0\4\3\1\u010d\6\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\6\3"+
    "\1\u010e\6\3\31\0\2\3\1\0\4\3\1\u010f\6\3"+
    "\2\0\15\3\31\0\2\3\1\0\2\3\1\u0110\10\3"+
    "\2\0\15\3\31\0\2\3\1\0\6\3\1\u0111\4\3"+
    "\2\0\15\3\31\0\2\3\1\0\7\3\1\u0112\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\11\3\1\u0113\1\3"+
    "\2\0\5\3\1\u0114\7\3\31\0\2\3\1\0\2\3"+
    "\1\u0115\10\3\2\0\15\3\31\0\2\3\1\0\4\3"+
    "\1\u0116\6\3\2\0\15\3\31\0\2\3\1\0\12\3"+
    "\1\u0117\2\0\15\3\31\0\2\3\1\0\3\3\1\u0118"+
    "\7\3\2\0\15\3\31\0\2\3\1\0\13\3\2\0"+
    "\3\3\1\u0119\11\3\31\0\2\3\1\0\4\3\1\u011a"+
    "\6\3\2\0\15\3\31\0\2\3\1\0\13\3\2\0"+
    "\1\u011b\14\3\31\0\2\3\1\0\7\3\1\u011c\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\7\3\1\u011d\3\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\4\3"+
    "\1\u011e\10\3\31\0\2\3\1\0\6\3\1\u011f\4\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\10\3"+
    "\1\u0120\4\3\31\0\2\3\1\0\13\3\2\0\10\3"+
    "\1\u0121\4\3\31\0\2\3\1\0\1\3\1\u0122\11\3"+
    "\2\0\15\3\31\0\2\3\1\0\13\3\2\0\1\u0123"+
    "\14\3\31\0\2\3\1\0\1\u0124\12\3\2\0\15\3"+
    "\31\0\2\3\1\0\10\3\1\u0125\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\6\3\1\u0126\4\3\2\0\15\3"+
    "\31\0\2\3\1\0\11\3\1\u0127\1\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\11\3\1\u0128\3\3"+
    "\31\0\2\3\1\0\10\3\1\u0129\2\3\2\0\15\3"+
    "\31\0\2\3\1\0\5\3\1\u012a\5\3\2\0\15\3"+
    "\31\0\2\3\1\0\11\3\1\u012b\1\3\2\0\15\3"+
    "\31\0\2\3\1\0\13\3\2\0\1\u012c\14\3\31\0"+
    "\2\3\1\0\3\3\1\u012d\7\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\10\3\1\u012e\4\3\31\0"+
    "\2\3\1\0\10\3\1\u012f\2\3\2\0\15\3\31\0"+
    "\2\3\1\0\4\3\1\u0130\6\3\2\0\15\3\31\0"+
    "\2\3\1\0\2\3\1\u0131\10\3\2\0\15\3\31\0"+
    "\2\3\1\0\10\3\1\u0132\2\3\2\0\15\3\31\0"+
    "\2\3\1\0\2\3\1\u0133\10\3\2\0\15\3\31\0"+
    "\2\3\1\0\2\3\1\u0134\10\3\2\0\15\3\31\0"+
    "\2\3\1\0\7\3\1\u0135\3\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\5\3\1\u0136\7\3\31\0"+
    "\2\3\1\0\6\3\1\u0137\4\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\4\3\1\u0138\10\3\31\0"+
    "\2\3\1\0\4\3\1\u0139\6\3\2\0\15\3\31\0"+
    "\2\3\1\0\13\3\2\0\5\3\1\u013a\7\3\31\0"+
    "\2\3\1\0\4\3\1\u013b\6\3\2\0\15\3\31\0"+
    "\2\3\1\0\4\3\1\u013c\6\3\2\0\15\3\31\0"+
    "\2\3\1\0\2\3\1\u013d\10\3\2\0\15\3\31\0"+
    "\2\3\1\0\11\3\1\u013e\1\3\2\0\15\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\2\11\12\1\5\11\10\1\1\11"+
    "\2\1\2\11\4\1\2\11\57\1\10\11\1\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\1\2\11\64\1\1\11"+
    "\1\1\5\11\60\1\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StratosLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

        @Override
        public int getTokenStart() {
          return 0;
        }

        @Override
        public int getTokenEnd() {
          return 0;
        }


        /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 125: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 126: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 127: break;
          case 4: 
            { return LBRACE;
            } 
            // fall through
          case 128: break;
          case 5: 
            { return RBRACE;
            } 
            // fall through
          case 129: break;
          case 6: 
            { return LBRACKET;
            } 
            // fall through
          case 130: break;
          case 7: 
            { return RBRACKET;
            } 
            // fall through
          case 131: break;
          case 8: 
            { return LPAREN;
            } 
            // fall through
          case 132: break;
          case 9: 
            { return RPAREN;
            } 
            // fall through
          case 133: break;
          case 10: 
            { return SEMICOLON;
            } 
            // fall through
          case 134: break;
          case 11: 
            { return MINUS;
            } 
            // fall through
          case 135: break;
          case 12: 
            { return EQ;
            } 
            // fall through
          case 136: break;
          case 13: 
            { return PLUS;
            } 
            // fall through
          case 137: break;
          case 14: 
            { return DIV;
            } 
            // fall through
          case 138: break;
          case 15: 
            { return MUL;
            } 
            // fall through
          case 139: break;
          case 16: 
            { return BIN_NOT;
            } 
            // fall through
          case 140: break;
          case 17: 
            { return REM;
            } 
            // fall through
          case 141: break;
          case 18: 
            { return NOT;
            } 
            // fall through
          case 142: break;
          case 19: 
            { return GT;
            } 
            // fall through
          case 143: break;
          case 20: 
            { return DOT;
            } 
            // fall through
          case 144: break;
          case 21: 
            { return QUEST;
            } 
            // fall through
          case 145: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 146: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 147: break;
          case 24: 
            { return LT;
            } 
            // fall through
          case 148: break;
          case 25: 
            { return OR;
            } 
            // fall through
          case 149: break;
          case 26: 
            { return XOR;
            } 
            // fall through
          case 150: break;
          case 27: 
            { return AND;
            } 
            // fall through
          case 151: break;
          case 28: 
            { return AT;
            } 
            // fall through
          case 152: break;
          case 29: 
            { return HASH;
            } 
            // fall through
          case 153: break;
          case 30: 
            { return IF;
            } 
            // fall through
          case 154: break;
          case 31: 
            { return IN;
            } 
            // fall through
          case 155: break;
          case 32: 
            { return IS;
            } 
            // fall through
          case 156: break;
          case 33: 
            { return OF;
            } 
            // fall through
          case 157: break;
          case 34: 
            { return ON;
            } 
            // fall through
          case 158: break;
          case 35: 
            { return AS;
            } 
            // fall through
          case 159: break;
          case 36: 
            { return DO;
            } 
            // fall through
          case 160: break;
          case 37: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 161: break;
          case 38: 
            { return MINUS_EQ;
            } 
            // fall through
          case 162: break;
          case 39: 
            { return EQ_EQ;
            } 
            // fall through
          case 163: break;
          case 40: 
            { return EXPRESSION_BODY_DEF;
            } 
            // fall through
          case 164: break;
          case 41: 
            { return PLUS_EQ;
            } 
            // fall through
          case 165: break;
          case 42: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 166: break;
          case 43: 
            { return DIV_EQ;
            } 
            // fall through
          case 167: break;
          case 44: 
            { return MUL_EQ;
            } 
            // fall through
          case 168: break;
          case 45: 
            { return INT_DIV;
            } 
            // fall through
          case 169: break;
          case 46: 
            { return REM_EQ;
            } 
            // fall through
          case 170: break;
          case 47: 
            { return NEQ;
            } 
            // fall through
          case 171: break;
          case 48: 
            { return DOT_DOT;
            } 
            // fall through
          case 172: break;
          case 49: 
            { return QUEST_DOT;
            } 
            // fall through
          case 173: break;
          case 50: 
            { return QUEST_QUEST;
            } 
            // fall through
          case 174: break;
          case 51: 
            { return LT_EQ;
            } 
            // fall through
          case 175: break;
          case 52: 
            { return LT_LT;
            } 
            // fall through
          case 176: break;
          case 53: 
            { return OR_EQ;
            } 
            // fall through
          case 177: break;
          case 54: 
            { return OR_OR;
            } 
            // fall through
          case 178: break;
          case 55: 
            { return XOR_EQ;
            } 
            // fall through
          case 179: break;
          case 56: 
            { return AND_EQ;
            } 
            // fall through
          case 180: break;
          case 57: 
            { return AND_AND;
            } 
            // fall through
          case 181: break;
          case 58: 
            { return FOR;
            } 
            // fall through
          case 182: break;
          case 59: 
            { return NEW;
            } 
            // fall through
          case 183: break;
          case 60: 
            { return TRY;
            } 
            // fall through
          case 184: break;
          case 61: 
            { return INT;
            } 
            // fall through
          case 185: break;
          case 62: 
            { return SET;
            } 
            // fall through
          case 186: break;
          case 63: 
            { return GET;
            } 
            // fall through
          case 187: break;
          case 64: 
            { return VAR;
            } 
            // fall through
          case 188: break;
          case 65: 
            { return INT_DIV_EQ;
            } 
            // fall through
          case 189: break;
          case 66: 
            { return DOT_DOT_DOT;
            } 
            // fall through
          case 190: break;
          case 67: 
            { return QUEST_DOT_DOT;
            } 
            // fall through
          case 191: break;
          case 68: 
            { return QUEST_QUEST_EQ;
            } 
            // fall through
          case 192: break;
          case 69: 
            { return LT_LT_EQ;
            } 
            // fall through
          case 193: break;
          case 70: 
            { return OR_OR_EQ;
            } 
            // fall through
          case 194: break;
          case 71: 
            { return AND_AND_EQ;
            } 
            // fall through
          case 195: break;
          case 72: 
            { return NULL;
            } 
            // fall through
          case 196: break;
          case 73: 
            { return CASE;
            } 
            // fall through
          case 197: break;
          case 74: 
            { return TRUE;
            } 
            // fall through
          case 198: break;
          case 75: 
            { return THIS;
            } 
            // fall through
          case 199: break;
          case 76: 
            { return ENUM;
            } 
            // fall through
          case 200: break;
          case 77: 
            { return ELSE;
            } 
            // fall through
          case 201: break;
          case 78: 
            { return SHOW;
            } 
            // fall through
          case 202: break;
          case 79: 
            { return SYNC;
            } 
            // fall through
          case 203: break;
          case 80: 
            { return HIDE;
            } 
            // fall through
          case 204: break;
          case 81: 
            { return LATE;
            } 
            // fall through
          case 205: break;
          case 82: 
            { return WITH;
            } 
            // fall through
          case 206: break;
          case 83: 
            { return PART;
            } 
            // fall through
          case 207: break;
          case 84: 
            { return VOID;
            } 
            // fall through
          case 208: break;
          case 85: 
            { return DOT_DOT_DOT_QUEST;
            } 
            // fall through
          case 209: break;
          case 86: 
            { return FINAL;
            } 
            // fall through
          case 210: break;
          case 87: 
            { return FALSE;
            } 
            // fall through
          case 211: break;
          case 88: 
            { return CONST;
            } 
            // fall through
          case 212: break;
          case 89: 
            { return CATCH;
            } 
            // fall through
          case 213: break;
          case 90: 
            { return CLASS;
            } 
            // fall through
          case 214: break;
          case 91: 
            { return THROW;
            } 
            // fall through
          case 215: break;
          case 92: 
            { return SUPER;
            } 
            // fall through
          case 216: break;
          case 93: 
            { return ASYNC;
            } 
            // fall through
          case 217: break;
          case 94: 
            { return AWAIT;
            } 
            // fall through
          case 218: break;
          case 95: 
            { return BREAK;
            } 
            // fall through
          case 219: break;
          case 96: 
            { return MIXIN;
            } 
            // fall through
          case 220: break;
          case 97: 
            { return YIELD;
            } 
            // fall through
          case 221: break;
          case 98: 
            { return WHILE;
            } 
            // fall through
          case 222: break;
          case 99: 
            { return NATIVE;
            } 
            // fall through
          case 223: break;
          case 100: 
            { return IMPORT;
            } 
            // fall through
          case 224: break;
          case 101: 
            { return RETURN;
            } 
            // fall through
          case 225: break;
          case 102: 
            { return EXPORT;
            } 
            // fall through
          case 226: break;
          case 103: 
            { return STRING;
            } 
            // fall through
          case 227: break;
          case 104: 
            { return STATIC;
            } 
            // fall through
          case 228: break;
          case 105: 
            { return SWITCH;
            } 
            // fall through
          case 229: break;
          case 106: 
            { return ASSERT;
            } 
            // fall through
          case 230: break;
          case 107: 
            { return FINALLY;
            } 
            // fall through
          case 231: break;
          case 108: 
            { return FACTORY;
            } 
            // fall through
          case 232: break;
          case 109: 
            { return TYPEDEF;
            } 
            // fall through
          case 233: break;
          case 110: 
            { return RETURNS;
            } 
            // fall through
          case 234: break;
          case 111: 
            { return RETHROW;
            } 
            // fall through
          case 235: break;
          case 112: 
            { return EXTENDS;
            } 
            // fall through
          case 236: break;
          case 113: 
            { return LIBRARY;
            } 
            // fall through
          case 237: break;
          case 114: 
            { return DEFAULT;
            } 
            // fall through
          case 238: break;
          case 115: 
            { return FUNCTION;
            } 
            // fall through
          case 239: break;
          case 116: 
            { return CONTINUE;
            } 
            // fall through
          case 240: break;
          case 117: 
            { return OPERATOR;
            } 
            // fall through
          case 241: break;
          case 118: 
            { return REQUIRED;
            } 
            // fall through
          case 242: break;
          case 119: 
            { return EXTERNAL;
            } 
            // fall through
          case 243: break;
          case 120: 
            { return ABSTRACT;
            } 
            // fall through
          case 244: break;
          case 121: 
            { return DEFERRED;
            } 
            // fall through
          case 245: break;
          case 122: 
            { return COVARIANT;
            } 
            // fall through
          case 246: break;
          case 123: 
            { return EXTENSION;
            } 
            // fall through
          case 247: break;
          case 124: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

        @Override
        public void reset(CharSequence buf, int start, int end, int initialState) {

        }


}
