//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SemanticLanguageGrammar {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISLGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SLGrammarBaseListener : ISLGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpSum</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathExpSum([NotNull] SLGrammarParser.MathExpSumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpSum</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathExpSum([NotNull] SLGrammarParser.MathExpSumContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpSub</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathExpSub([NotNull] SLGrammarParser.MathExpSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpSub</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathExpSub([NotNull] SLGrammarParser.MathExpSubContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathExpEmpty([NotNull] SLGrammarParser.MathExpEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathExpEmpty([NotNull] SLGrammarParser.MathExpEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Bigger</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBigger([NotNull] SLGrammarParser.BiggerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Bigger</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBigger([NotNull] SLGrammarParser.BiggerContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLesser([NotNull] SLGrammarParser.LesserContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLesser([NotNull] SLGrammarParser.LesserContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>LesserOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLesserOrEqual([NotNull] SLGrammarParser.LesserOrEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LesserOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLesserOrEqual([NotNull] SLGrammarParser.LesserOrEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolInequalityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolInequalityEmpty([NotNull] SLGrammarParser.BoolInequalityEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolInequalityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolInequalityEmpty([NotNull] SLGrammarParser.BoolInequalityEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BiggerOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBiggerOrEqual([NotNull] SLGrammarParser.BiggerOrEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BiggerOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBiggerOrEqual([NotNull] SLGrammarParser.BiggerOrEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>LogicOr</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicOr([NotNull] SLGrammarParser.LogicOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicOr</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicOr([NotNull] SLGrammarParser.LogicOrContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolOrEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolOrEmpty([NotNull] SLGrammarParser.BoolOrEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolOrEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolOrEmpty([NotNull] SLGrammarParser.BoolOrEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorUnaryMinus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFactorUnaryMinus([NotNull] SLGrammarParser.MathFactorUnaryMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorUnaryMinus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFactorUnaryMinus([NotNull] SLGrammarParser.MathFactorUnaryMinusContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFactorBrackets([NotNull] SLGrammarParser.MathFactorBracketsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFactorBrackets([NotNull] SLGrammarParser.MathFactorBracketsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFactorEmpty([NotNull] SLGrammarParser.MathFactorEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFactorEmpty([NotNull] SLGrammarParser.MathFactorEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorUnaryPlus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFactorUnaryPlus([NotNull] SLGrammarParser.MathFactorUnaryPlusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorUnaryPlus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFactorUnaryPlus([NotNull] SLGrammarParser.MathFactorUnaryPlusContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAndEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolAndEmpty([NotNull] SLGrammarParser.BoolAndEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAndEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolAndEmpty([NotNull] SLGrammarParser.BoolAndEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>LogicAnd</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicAnd([NotNull] SLGrammarParser.LogicAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicAnd</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicAnd([NotNull] SLGrammarParser.LogicAndContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolAtomBrackets([NotNull] SLGrammarParser.BoolAtomBracketsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolAtomBrackets([NotNull] SLGrammarParser.BoolAtomBracketsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot([NotNull] SLGrammarParser.NotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot([NotNull] SLGrammarParser.NotContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolAtomEmpty([NotNull] SLGrammarParser.BoolAtomEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolAtomEmpty([NotNull] SLGrammarParser.BoolAtomEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomBracketsNot</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolAtomBracketsNot([NotNull] SLGrammarParser.BoolAtomBracketsNotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomBracketsNot</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolAtomBracketsNot([NotNull] SLGrammarParser.BoolAtomBracketsNotContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>IfElseIfElse</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseIfElse([NotNull] SLGrammarParser.IfElseIfElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfElseIfElse</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseIfElse([NotNull] SLGrammarParser.IfElseIfElseContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>IfSingle</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfSingle([NotNull] SLGrammarParser.IfSingleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfSingle</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfSingle([NotNull] SLGrammarParser.IfSingleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolEqualityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolEqualityEmpty([NotNull] SLGrammarParser.BoolEqualityEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolEqualityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolEqualityEmpty([NotNull] SLGrammarParser.BoolEqualityEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathNotEqual([NotNull] SLGrammarParser.MathNotEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathNotEqual([NotNull] SLGrammarParser.MathNotEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolNotEqual([NotNull] SLGrammarParser.BoolNotEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolNotEqual([NotNull] SLGrammarParser.BoolNotEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolEqual([NotNull] SLGrammarParser.BoolEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolEqual([NotNull] SLGrammarParser.BoolEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathEqual([NotNull] SLGrammarParser.MathEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathEqual([NotNull] SLGrammarParser.MathEqualContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermDiv</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathTermDiv([NotNull] SLGrammarParser.MathTermDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermDiv</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathTermDiv([NotNull] SLGrammarParser.MathTermDivContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermMod</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathTermMod([NotNull] SLGrammarParser.MathTermModContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermMod</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathTermMod([NotNull] SLGrammarParser.MathTermModContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermMul</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathTermMul([NotNull] SLGrammarParser.MathTermMulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermMul</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathTermMul([NotNull] SLGrammarParser.MathTermMulContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathTermEmpty([NotNull] SLGrammarParser.MathTermEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathTermEmpty([NotNull] SLGrammarParser.MathTermEmptyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeName([NotNull] SLGrammarParser.TypeNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeName([NotNull] SLGrammarParser.TypeNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPtrType([NotNull] SLGrammarParser.PtrTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPtrType([NotNull] SLGrammarParser.PtrTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.scalarType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScalarType([NotNull] SLGrammarParser.ScalarTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.scalarType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScalarType([NotNull] SLGrammarParser.ScalarTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionalType([NotNull] SLGrammarParser.FunctionalTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionalType([NotNull] SLGrammarParser.FunctionalTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleType([NotNull] SLGrammarParser.SimpleTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleType([NotNull] SLGrammarParser.SimpleTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionType([NotNull] SLGrammarParser.FunctionTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionType([NotNull] SLGrammarParser.FunctionTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.procedureType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedureType([NotNull] SLGrammarParser.ProcedureTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.procedureType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedureType([NotNull] SLGrammarParser.ProcedureTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionalArgList([NotNull] SLGrammarParser.FunctionalArgListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionalArgList([NotNull] SLGrammarParser.FunctionalArgListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionalArg([NotNull] SLGrammarParser.FunctionalArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionalArg([NotNull] SLGrammarParser.FunctionalArgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayType([NotNull] SLGrammarParser.ArrayTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayType([NotNull] SLGrammarParser.ArrayTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDimention"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDimention([NotNull] SLGrammarParser.ArrayDimentionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDimention"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDimention([NotNull] SLGrammarParser.ArrayDimentionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] SLGrammarParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] SLGrammarParser.StartContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleImportList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuleImportList([NotNull] SLGrammarParser.ModuleImportListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleImportList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuleImportList([NotNull] SLGrammarParser.ModuleImportListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleImport"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuleImport([NotNull] SLGrammarParser.ModuleImportContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleImport"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuleImport([NotNull] SLGrammarParser.ModuleImportContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.module"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModule([NotNull] SLGrammarParser.ModuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.module"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModule([NotNull] SLGrammarParser.ModuleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuleDeclare([NotNull] SLGrammarParser.ModuleDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuleDeclare([NotNull] SLGrammarParser.ModuleDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.base_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBase_head([NotNull] SLGrammarParser.Base_headContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.base_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBase_head([NotNull] SLGrammarParser.Base_headContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.inherit_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInherit_head([NotNull] SLGrammarParser.Inherit_headContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.inherit_head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInherit_head([NotNull] SLGrammarParser.Inherit_headContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.classDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDeclare([NotNull] SLGrammarParser.ClassDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.classDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDeclare([NotNull] SLGrammarParser.ClassDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.classStatements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassStatements([NotNull] SLGrammarParser.ClassStatementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.classStatements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassStatements([NotNull] SLGrammarParser.ClassStatementsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDeclare([NotNull] SLGrammarParser.MethodDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDeclare([NotNull] SLGrammarParser.MethodDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.thisHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisHeader([NotNull] SLGrammarParser.ThisHeaderContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.thisHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisHeader([NotNull] SLGrammarParser.ThisHeaderContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodFuncAbstract"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodFuncAbstract([NotNull] SLGrammarParser.MethodFuncAbstractContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodFuncAbstract"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodFuncAbstract([NotNull] SLGrammarParser.MethodFuncAbstractContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodProcAbstract"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodProcAbstract([NotNull] SLGrammarParser.MethodProcAbstractContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodProcAbstract"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodProcAbstract([NotNull] SLGrammarParser.MethodProcAbstractContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodFuncDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodFuncDeclare([NotNull] SLGrammarParser.MethodFuncDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodFuncDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodFuncDeclare([NotNull] SLGrammarParser.MethodFuncDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodProcDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodProcDeclare([NotNull] SLGrammarParser.MethodProcDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodProcDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodProcDeclare([NotNull] SLGrammarParser.MethodProcDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.fieldDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldDeclare([NotNull] SLGrammarParser.FieldDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.fieldDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldDeclare([NotNull] SLGrammarParser.FieldDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclare([NotNull] SLGrammarParser.FunctionDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclare([NotNull] SLGrammarParser.FunctionDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.procedureDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedureDeclare([NotNull] SLGrammarParser.ProcedureDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.procedureDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedureDeclare([NotNull] SLGrammarParser.ProcedureDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.varModuleDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarModuleDeclare([NotNull] SLGrammarParser.VarModuleDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.varModuleDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarModuleDeclare([NotNull] SLGrammarParser.VarModuleDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionalDeclareArgList([NotNull] SLGrammarParser.FunctionalDeclareArgListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionalDeclareArgList([NotNull] SLGrammarParser.FunctionalDeclareArgListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionalDeclareArg([NotNull] SLGrammarParser.FunctionalDeclareArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionalDeclareArg([NotNull] SLGrammarParser.FunctionalDeclareArgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuleEntry([NotNull] SLGrammarParser.ModuleEntryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuleEntry([NotNull] SLGrammarParser.ModuleEntryContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.statementSeq"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementSeq([NotNull] SLGrammarParser.StatementSeqContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.statementSeq"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementSeq([NotNull] SLGrammarParser.StatementSeqContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] SLGrammarParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] SLGrammarParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleStatement([NotNull] SLGrammarParser.SimpleStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleStatement([NotNull] SLGrammarParser.SimpleStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.complexStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplexStatement([NotNull] SLGrammarParser.ComplexStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.complexStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplexStatement([NotNull] SLGrammarParser.ComplexStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclare([NotNull] SLGrammarParser.DeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclare([NotNull] SLGrammarParser.DeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.constDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstDeclare([NotNull] SLGrammarParser.ConstDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.constDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstDeclare([NotNull] SLGrammarParser.ConstDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.varDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDeclare([NotNull] SLGrammarParser.VarDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.varDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDeclare([NotNull] SLGrammarParser.VarDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.scalarDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScalarDeclare([NotNull] SLGrammarParser.ScalarDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.scalarDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScalarDeclare([NotNull] SLGrammarParser.ScalarDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDeclare([NotNull] SLGrammarParser.ArrayDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDeclare([NotNull] SLGrammarParser.ArrayDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPtrDeclare([NotNull] SLGrammarParser.PtrDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPtrDeclare([NotNull] SLGrammarParser.PtrDeclareContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclareType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDeclareType([NotNull] SLGrammarParser.ArrayDeclareTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclareType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDeclareType([NotNull] SLGrammarParser.ArrayDeclareTypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclareDimention"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDeclareDimention([NotNull] SLGrammarParser.ArrayDeclareDimentionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclareDimention"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDeclareDimention([NotNull] SLGrammarParser.ArrayDeclareDimentionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayElement([NotNull] SLGrammarParser.ArrayElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayElement([NotNull] SLGrammarParser.ArrayElementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayLenProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLenProperty([NotNull] SLGrammarParser.ArrayLenPropertyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayLenProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLenProperty([NotNull] SLGrammarParser.ArrayLenPropertyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.let"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLet([NotNull] SLGrammarParser.LetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.let"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLet([NotNull] SLGrammarParser.LetContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleLet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleLet([NotNull] SLGrammarParser.SimpleLetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleLet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleLet([NotNull] SLGrammarParser.SimpleLetContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayLet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLet([NotNull] SLGrammarParser.ArrayLetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayLet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLet([NotNull] SLGrammarParser.ArrayLetContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.using"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsing([NotNull] SLGrammarParser.UsingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.using"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsing([NotNull] SLGrammarParser.UsingContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.return_val"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn_val([NotNull] SLGrammarParser.Return_valContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.return_val"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn_val([NotNull] SLGrammarParser.Return_valContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInput([NotNull] SLGrammarParser.InputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInput([NotNull] SLGrammarParser.InputContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.output"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOutput([NotNull] SLGrammarParser.OutputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.output"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOutput([NotNull] SLGrammarParser.OutputContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.outputArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOutputArgument([NotNull] SLGrammarParser.OutputArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.outputArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOutputArgument([NotNull] SLGrammarParser.OutputArgumentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] SLGrammarParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] SLGrammarParser.CallContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.callArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallArgList([NotNull] SLGrammarParser.CallArgListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.callArgList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallArgList([NotNull] SLGrammarParser.CallArgListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.callArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallArg([NotNull] SLGrammarParser.CallArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.callArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallArg([NotNull] SLGrammarParser.CallArgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.call_func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall_func([NotNull] SLGrammarParser.Call_funcContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.call_func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall_func([NotNull] SLGrammarParser.Call_funcContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_cond([NotNull] SLGrammarParser.If_condContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.if_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_cond([NotNull] SLGrammarParser.If_condContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.while_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile_cond([NotNull] SLGrammarParser.While_condContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.while_cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile_cond([NotNull] SLGrammarParser.While_condContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.repeat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeat([NotNull] SLGrammarParser.RepeatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.repeat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeat([NotNull] SLGrammarParser.RepeatContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathExpression([NotNull] SLGrammarParser.MathExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathExpression([NotNull] SLGrammarParser.MathExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathTerm([NotNull] SLGrammarParser.MathTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathTerm([NotNull] SLGrammarParser.MathTermContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFactor([NotNull] SLGrammarParser.MathFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFactor([NotNull] SLGrammarParser.MathFactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpression([NotNull] SLGrammarParser.BoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpression([NotNull] SLGrammarParser.BoolExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolAnd([NotNull] SLGrammarParser.BoolAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolAnd([NotNull] SLGrammarParser.BoolAndContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolEquality([NotNull] SLGrammarParser.BoolEqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolEquality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolEquality([NotNull] SLGrammarParser.BoolEqualityContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolInequality([NotNull] SLGrammarParser.BoolInequalityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolInequality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolInequality([NotNull] SLGrammarParser.BoolInequalityContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolFactor([NotNull] SLGrammarParser.BoolFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolFactor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolFactor([NotNull] SLGrammarParser.BoolFactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.newExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewExp([NotNull] SLGrammarParser.NewExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.newExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewExp([NotNull] SLGrammarParser.NewExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrExpAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPtrExpAtom([NotNull] SLGrammarParser.PtrExpAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrExpAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPtrExpAtom([NotNull] SLGrammarParser.PtrExpAtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.expAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpAtom([NotNull] SLGrammarParser.ExpAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.expAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpAtom([NotNull] SLGrammarParser.ExpAtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.id"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterId([NotNull] SLGrammarParser.IdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.id"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitId([NotNull] SLGrammarParser.IdContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray([NotNull] SLGrammarParser.ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray([NotNull] SLGrammarParser.ArrayContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExp([NotNull] SLGrammarParser.ExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExp([NotNull] SLGrammarParser.ExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.raw"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRaw([NotNull] SLGrammarParser.RawContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.raw"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRaw([NotNull] SLGrammarParser.RawContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.any"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAny([NotNull] SLGrammarParser.AnyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.any"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAny([NotNull] SLGrammarParser.AnyContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace SemanticLanguageGrammar
