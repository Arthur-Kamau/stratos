//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SemanticLanguageGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SLGrammarParser : Parser {
	public const int
		Colon=1, Semicolon=2, Comma=3, Point=4, Variable=5, Const=6, Length=7, 
		Let=8, Return=9, Input=10, Output=11, Call=12, If=13, Then=14, Else=15, 
		While=16, Repeat=17, Elseif=18, Do=19, Raw=20, AddOp=21, SubOp=22, MulOp=23, 
		DivOp=24, ModOp=25, BoolOr=26, BoolAnd=27, BoolEq=28, BoolNeq=29, BoolG=30, 
		BoolL=31, BoolGeq=32, BoolLeq=33, BoolNot=34, ModuleToken=35, ImportToken=36, 
		Start=37, End=38, Function=39, Procedure=40, Using=41, LBrace=42, RBrace=43, 
		LSBrace=44, RSBrace=45, LABrace=46, RABrace=47, AssignToken=48, New=49, 
		Nil=50, Pointer=51, ArrayToken=52, FunctionArgModifier=53, AccessModifier=54, 
		Class=55, Inherit=56, Base=57, Abstract=58, Override=59, SimpleType=60, 
		IntValue=61, RealValue=62, BoolValue=63, Id=64, StringLiteral=65, Comment=66, 
		Ws=67;
	public const int
		RULE_typeName = 0, RULE_ptrType = 1, RULE_scalarType = 2, RULE_functionalType = 3, 
		RULE_simpleType = 4, RULE_functionType = 5, RULE_procedureType = 6, RULE_functionalArgList = 7, 
		RULE_functionalArg = 8, RULE_arrayType = 9, RULE_arrayDimention = 10, 
		RULE_start = 11, RULE_moduleImportList = 12, RULE_moduleImport = 13, RULE_module = 14, 
		RULE_moduleDeclare = 15, RULE_base_head = 16, RULE_inherit_head = 17, 
		RULE_classDeclare = 18, RULE_classStatements = 19, RULE_methodDeclare = 20, 
		RULE_thisHeader = 21, RULE_methodFuncAbstract = 22, RULE_methodProcAbstract = 23, 
		RULE_methodFuncDeclare = 24, RULE_methodProcDeclare = 25, RULE_fieldDeclare = 26, 
		RULE_functionDeclare = 27, RULE_procedureDeclare = 28, RULE_varModuleDeclare = 29, 
		RULE_functionalDeclareArgList = 30, RULE_functionalDeclareArg = 31, RULE_moduleEntry = 32, 
		RULE_statementSeq = 33, RULE_statement = 34, RULE_simpleStatement = 35, 
		RULE_complexStatement = 36, RULE_declare = 37, RULE_constDeclare = 38, 
		RULE_varDeclare = 39, RULE_scalarDeclare = 40, RULE_arrayDeclare = 41, 
		RULE_ptrDeclare = 42, RULE_arrayDeclareType = 43, RULE_arrayDeclareDimention = 44, 
		RULE_arrayElement = 45, RULE_arrayLenProperty = 46, RULE_let = 47, RULE_simpleLet = 48, 
		RULE_arrayLet = 49, RULE_using = 50, RULE_return_val = 51, RULE_input = 52, 
		RULE_output = 53, RULE_outputArgument = 54, RULE_call = 55, RULE_callArgList = 56, 
		RULE_callArg = 57, RULE_call_func = 58, RULE_if_cond = 59, RULE_while_cond = 60, 
		RULE_repeat = 61, RULE_mathExpression = 62, RULE_mathTerm = 63, RULE_mathFactor = 64, 
		RULE_boolExpression = 65, RULE_boolAnd = 66, RULE_boolEquality = 67, RULE_boolInequality = 68, 
		RULE_boolFactor = 69, RULE_newExp = 70, RULE_ptrExpAtom = 71, RULE_expAtom = 72, 
		RULE_id = 73, RULE_array = 74, RULE_exp = 75, RULE_raw = 76, RULE_any = 77;
	public static readonly string[] ruleNames = {
		"typeName", "ptrType", "scalarType", "functionalType", "simpleType", "functionType", 
		"procedureType", "functionalArgList", "functionalArg", "arrayType", "arrayDimention", 
		"start", "moduleImportList", "moduleImport", "module", "moduleDeclare", 
		"base_head", "inherit_head", "classDeclare", "classStatements", "methodDeclare", 
		"thisHeader", "methodFuncAbstract", "methodProcAbstract", "methodFuncDeclare", 
		"methodProcDeclare", "fieldDeclare", "functionDeclare", "procedureDeclare", 
		"varModuleDeclare", "functionalDeclareArgList", "functionalDeclareArg", 
		"moduleEntry", "statementSeq", "statement", "simpleStatement", "complexStatement", 
		"declare", "constDeclare", "varDeclare", "scalarDeclare", "arrayDeclare", 
		"ptrDeclare", "arrayDeclareType", "arrayDeclareDimention", "arrayElement", 
		"arrayLenProperty", "let", "simpleLet", "arrayLet", "using", "return_val", 
		"input", "output", "outputArgument", "call", "callArgList", "callArg", 
		"call_func", "if_cond", "while_cond", "repeat", "mathExpression", "mathTerm", 
		"mathFactor", "boolExpression", "boolAnd", "boolEquality", "boolInequality", 
		"boolFactor", "newExp", "ptrExpAtom", "expAtom", "id", "array", "exp", 
		"raw", "any"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "','", "'.'", "'variable'", "'const'", "'length'", 
		"'let'", "'return'", "'input'", "'output'", "'call'", "'if'", "'then'", 
		"'else'", "'while'", "'repeat'", "'elseif'", "'do'", "'raw'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'!'", "'module'", "'import'", "'start'", "'end'", "'function'", 
		"'procedure'", "'using'", "'('", "')'", "'['", "']'", "'{'", "'}'", "':='", 
		"'new'", "'nil'", "'pointer'", "'array'", null, null, "'class'", "'inherit'", 
		"'base'", "'abstract'", "'override'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Colon", "Semicolon", "Comma", "Point", "Variable", "Const", "Length", 
		"Let", "Return", "Input", "Output", "Call", "If", "Then", "Else", "While", 
		"Repeat", "Elseif", "Do", "Raw", "AddOp", "SubOp", "MulOp", "DivOp", "ModOp", 
		"BoolOr", "BoolAnd", "BoolEq", "BoolNeq", "BoolG", "BoolL", "BoolGeq", 
		"BoolLeq", "BoolNot", "ModuleToken", "ImportToken", "Start", "End", "Function", 
		"Procedure", "Using", "LBrace", "RBrace", "LSBrace", "RSBrace", "LABrace", 
		"RABrace", "AssignToken", "New", "Nil", "Pointer", "ArrayToken", "FunctionArgModifier", 
		"AccessModifier", "Class", "Inherit", "Base", "Abstract", "Override", 
		"SimpleType", "IntValue", "RealValue", "BoolValue", "Id", "StringLiteral", 
		"Comment", "Ws"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SLGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SLGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TypeNameContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_typeName);
		try {
			State = 158;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Function:
			case Procedure:
			case Pointer:
			case SimpleType:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; scalarType();
				}
				break;
			case ArrayToken:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrTypeContext : ParserRuleContext {
		public ITerminalNode Pointer() { return GetToken(SLGrammarParser.Pointer, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public PtrTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterPtrType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitPtrType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrTypeContext ptrType() {
		PtrTypeContext _localctx = new PtrTypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_ptrType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(Pointer);
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 161; Match(LBrace);
				State = 162; id();
				State = 163; Match(RBrace);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public FunctionalTypeContext functionalType() {
			return GetRuleContext<FunctionalTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_scalarType);
		try {
			State = 171;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; simpleType();
				}
				break;
			case Function:
			case Procedure:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; functionalType();
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169; id();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; ptrType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalTypeContext : ParserRuleContext {
		public ProcedureTypeContext procedureType() {
			return GetRuleContext<ProcedureTypeContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public FunctionalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionalType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalTypeContext functionalType() {
		FunctionalTypeContext _localctx = new FunctionalTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_functionalType);
		try {
			State = 175;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Function:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; procedureType();
				}
				break;
			case Procedure:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; functionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ITerminalNode SimpleType() { return GetToken(SLGrammarParser.SimpleType, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_simpleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(SimpleType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public ITerminalNode Procedure() { return GetToken(SLGrammarParser.Procedure, 0); }
		public FunctionalArgListContext functionalArgList() {
			return GetRuleContext<FunctionalArgListContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SLGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(Procedure);
			State = 180; functionalArgList();
			State = 181; Match(Colon);
			State = 182; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTypeContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(SLGrammarParser.Function, 0); }
		public FunctionalArgListContext functionalArgList() {
			return GetRuleContext<FunctionalArgListContext>(0);
		}
		public ProcedureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterProcedureType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitProcedureType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTypeContext procedureType() {
		ProcedureTypeContext _localctx = new ProcedureTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_procedureType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(Function);
			State = 185; functionalArgList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalArgListContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public FunctionalArgContext[] functionalArg() {
			return GetRuleContexts<FunctionalArgContext>();
		}
		public FunctionalArgContext functionalArg(int i) {
			return GetRuleContext<FunctionalArgContext>(i);
		}
		public ITerminalNode Comma() { return GetToken(SLGrammarParser.Comma, 0); }
		public FunctionalArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionalArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionalArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalArgListContext functionalArgList() {
		FunctionalArgListContext _localctx = new FunctionalArgListContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_functionalArgList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(LBrace);
			State = 193;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FunctionArgModifier:
				{
				State = 188; functionalArg();
				{
				State = 189; Match(Comma);
				State = 190; functionalArg();
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 195; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalArgContext : ParserRuleContext {
		public ITerminalNode FunctionArgModifier() { return GetToken(SLGrammarParser.FunctionArgModifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FunctionalArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionalArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionalArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalArgContext functionalArg() {
		FunctionalArgContext _localctx = new FunctionalArgContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionalArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(FunctionArgModifier);
			State = 198; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode ArrayToken() { return GetToken(SLGrammarParser.ArrayToken, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayDimentionContext[] arrayDimention() {
			return GetRuleContexts<ArrayDimentionContext>();
		}
		public ArrayDimentionContext arrayDimention(int i) {
			return GetRuleContext<ArrayDimentionContext>(i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(ArrayToken);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 201; arrayDimention();
				}
				}
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 206; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimentionContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLGrammarParser.LSBrace, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLGrammarParser.RSBrace, 0); }
		public ArrayDimentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDimention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDimention(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimentionContext arrayDimention() {
		ArrayDimentionContext _localctx = new ArrayDimentionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_arrayDimention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(LSBrace);
			State = 209; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public ModuleImportListContext moduleImportList() {
			return GetRuleContext<ModuleImportListContext>(0);
		}
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; moduleImportList();
			State = 212; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportListContext : ParserRuleContext {
		public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		public RawContext[] raw() {
			return GetRuleContexts<RawContext>();
		}
		public RawContext raw(int i) {
			return GetRuleContext<RawContext>(i);
		}
		public ModuleImportListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImportList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterModuleImportList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitModuleImportList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImportList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportListContext moduleImportList() {
		ModuleImportListContext _localctx = new ModuleImportListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleImportList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Raw || _la==ImportToken) {
				{
				State = 216;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ImportToken:
					{
					State = 214; moduleImport();
					}
					break;
				case Raw:
					{
					State = 215; raw();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		public ITerminalNode ImportToken() { return GetToken(SLGrammarParser.ImportToken, 0); }
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterModuleImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitModuleImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(ImportToken);
			State = 222; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode ModuleToken() { return GetToken(SLGrammarParser.ModuleToken, 0); }
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ModuleDeclareContext moduleDeclare() {
			return GetRuleContext<ModuleDeclareContext>(0);
		}
		public ModuleEntryContext moduleEntry() {
			return GetRuleContext<ModuleEntryContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(ModuleToken);
			State = 225; Match(Id);
			State = 226; moduleDeclare();
			State = 227; moduleEntry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclareContext : ParserRuleContext {
		public FunctionDeclareContext[] functionDeclare() {
			return GetRuleContexts<FunctionDeclareContext>();
		}
		public FunctionDeclareContext functionDeclare(int i) {
			return GetRuleContext<FunctionDeclareContext>(i);
		}
		public ProcedureDeclareContext[] procedureDeclare() {
			return GetRuleContexts<ProcedureDeclareContext>();
		}
		public ProcedureDeclareContext procedureDeclare(int i) {
			return GetRuleContext<ProcedureDeclareContext>(i);
		}
		public RawContext[] raw() {
			return GetRuleContexts<RawContext>();
		}
		public RawContext raw(int i) {
			return GetRuleContext<RawContext>(i);
		}
		public VarModuleDeclareContext[] varModuleDeclare() {
			return GetRuleContexts<VarModuleDeclareContext>();
		}
		public VarModuleDeclareContext varModuleDeclare(int i) {
			return GetRuleContext<VarModuleDeclareContext>(i);
		}
		public ClassDeclareContext[] classDeclare() {
			return GetRuleContexts<ClassDeclareContext>();
		}
		public ClassDeclareContext classDeclare(int i) {
			return GetRuleContext<ClassDeclareContext>(i);
		}
		public ModuleDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclareContext moduleDeclare() {
		ModuleDeclareContext _localctx = new ModuleDeclareContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_moduleDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Raw || _la==AccessModifier) {
				{
				State = 234;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 229; functionDeclare();
					}
					break;

				case 2:
					{
					State = 230; procedureDeclare();
					}
					break;

				case 3:
					{
					State = 231; raw();
					}
					break;

				case 4:
					{
					State = 232; varModuleDeclare();
					}
					break;

				case 5:
					{
					State = 233; classDeclare();
					}
					break;
				}
				}
				State = 238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_headContext : ParserRuleContext {
		public ITerminalNode Base() { return GetToken(SLGrammarParser.Base, 0); }
		public Base_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_head; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBase_head(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBase_head(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_headContext base_head() {
		Base_headContext _localctx = new Base_headContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_base_head);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Base) {
				{
				State = 239; Match(Base);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inherit_headContext : ParserRuleContext {
		public ITerminalNode Inherit() { return GetToken(SLGrammarParser.Inherit, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public Inherit_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherit_head; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterInherit_head(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitInherit_head(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherit_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inherit_headContext inherit_head() {
		Inherit_headContext _localctx = new Inherit_headContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_inherit_head);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Inherit) {
				{
				State = 242; Match(Inherit);
				State = 243; Match(LBrace);
				State = 244; id();
				State = 245; Match(RBrace);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public Base_headContext base_head() {
			return GetRuleContext<Base_headContext>(0);
		}
		public ITerminalNode Class() { return GetToken(SLGrammarParser.Class, 0); }
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public Inherit_headContext inherit_head() {
			return GetRuleContext<Inherit_headContext>(0);
		}
		public ClassStatementsContext classStatements() {
			return GetRuleContext<ClassStatementsContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ClassDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterClassDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitClassDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclareContext classDeclare() {
		ClassDeclareContext _localctx = new ClassDeclareContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_classDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(AccessModifier);
			State = 250; base_head();
			State = 251; Match(Class);
			State = 252; Match(Id);
			State = 253; inherit_head();
			State = 254; classStatements();
			State = 255; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassStatementsContext : ParserRuleContext {
		public MethodDeclareContext[] methodDeclare() {
			return GetRuleContexts<MethodDeclareContext>();
		}
		public MethodDeclareContext methodDeclare(int i) {
			return GetRuleContext<MethodDeclareContext>(i);
		}
		public RawContext[] raw() {
			return GetRuleContexts<RawContext>();
		}
		public RawContext raw(int i) {
			return GetRuleContext<RawContext>(i);
		}
		public FieldDeclareContext[] fieldDeclare() {
			return GetRuleContexts<FieldDeclareContext>();
		}
		public FieldDeclareContext fieldDeclare(int i) {
			return GetRuleContext<FieldDeclareContext>(i);
		}
		public ClassStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterClassStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitClassStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassStatementsContext classStatements() {
		ClassStatementsContext _localctx = new ClassStatementsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_classStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Raw || _la==AccessModifier) {
				{
				State = 260;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 257; methodDeclare();
					}
					break;

				case 2:
					{
					State = 258; raw();
					}
					break;

				case 3:
					{
					State = 259; fieldDeclare();
					}
					break;
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclareContext : ParserRuleContext {
		public MethodFuncDeclareContext methodFuncDeclare() {
			return GetRuleContext<MethodFuncDeclareContext>(0);
		}
		public MethodProcDeclareContext methodProcDeclare() {
			return GetRuleContext<MethodProcDeclareContext>(0);
		}
		public MethodFuncAbstractContext methodFuncAbstract() {
			return GetRuleContext<MethodFuncAbstractContext>(0);
		}
		public MethodProcAbstractContext methodProcAbstract() {
			return GetRuleContext<MethodProcAbstractContext>(0);
		}
		public MethodDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclareContext methodDeclare() {
		MethodDeclareContext _localctx = new MethodDeclareContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_methodDeclare);
		try {
			State = 269;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; methodFuncDeclare();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; methodProcDeclare();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; methodFuncAbstract();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; methodProcAbstract();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisHeaderContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public FunctionalDeclareArgContext functionalDeclareArg() {
			return GetRuleContext<FunctionalDeclareArgContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public ThisHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterThisHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitThisHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisHeaderContext thisHeader() {
		ThisHeaderContext _localctx = new ThisHeaderContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_thisHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(LBrace);
			State = 272; functionalDeclareArg();
			State = 273; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodFuncAbstractContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ITerminalNode Abstract() { return GetToken(SLGrammarParser.Abstract, 0); }
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Function() { return GetToken(SLGrammarParser.Function, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SLGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode Semicolon() { return GetToken(SLGrammarParser.Semicolon, 0); }
		public MethodFuncAbstractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodFuncAbstract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMethodFuncAbstract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMethodFuncAbstract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodFuncAbstract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodFuncAbstractContext methodFuncAbstract() {
		MethodFuncAbstractContext _localctx = new MethodFuncAbstractContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_methodFuncAbstract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(AccessModifier);
			State = 276; Match(Abstract);
			State = 277; thisHeader();
			State = 278; Match(Function);
			State = 279; functionalDeclareArgList();
			State = 280; Match(Colon);
			State = 281; typeName();
			State = 282; Match(Id);
			State = 283; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodProcAbstractContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ITerminalNode Abstract() { return GetToken(SLGrammarParser.Abstract, 0); }
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Procedure() { return GetToken(SLGrammarParser.Procedure, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode Semicolon() { return GetToken(SLGrammarParser.Semicolon, 0); }
		public MethodProcAbstractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodProcAbstract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMethodProcAbstract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMethodProcAbstract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProcAbstract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodProcAbstractContext methodProcAbstract() {
		MethodProcAbstractContext _localctx = new MethodProcAbstractContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_methodProcAbstract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(AccessModifier);
			State = 286; Match(Abstract);
			State = 287; thisHeader();
			State = 288; Match(Procedure);
			State = 289; functionalDeclareArgList();
			State = 290; Match(Id);
			State = 291; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodFuncDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Function() { return GetToken(SLGrammarParser.Function, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SLGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ITerminalNode Override() { return GetToken(SLGrammarParser.Override, 0); }
		public MethodFuncDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodFuncDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMethodFuncDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMethodFuncDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodFuncDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodFuncDeclareContext methodFuncDeclare() {
		MethodFuncDeclareContext _localctx = new MethodFuncDeclareContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_methodFuncDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(AccessModifier);
			State = 295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Override) {
				{
				State = 294; Match(Override);
				}
			}

			State = 297; thisHeader();
			State = 298; Match(Function);
			State = 299; functionalDeclareArgList();
			State = 300; Match(Colon);
			State = 301; typeName();
			State = 302; Match(Id);
			State = 303; statementSeq();
			State = 304; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodProcDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Procedure() { return GetToken(SLGrammarParser.Procedure, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ITerminalNode Override() { return GetToken(SLGrammarParser.Override, 0); }
		public MethodProcDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodProcDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMethodProcDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMethodProcDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProcDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodProcDeclareContext methodProcDeclare() {
		MethodProcDeclareContext _localctx = new MethodProcDeclareContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_methodProcDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(AccessModifier);
			State = 308;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Override) {
				{
				State = 307; Match(Override);
				}
			}

			State = 310; thisHeader();
			State = 311; Match(Procedure);
			State = 312; functionalDeclareArgList();
			State = 313; Match(Id);
			State = 314; statementSeq();
			State = 315; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLGrammarParser.Semicolon, 0); }
		public FieldDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFieldDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFieldDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclareContext fieldDeclare() {
		FieldDeclareContext _localctx = new FieldDeclareContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_fieldDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(AccessModifier);
			State = 318; varDeclare();
			State = 319; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ITerminalNode Function() { return GetToken(SLGrammarParser.Function, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SLGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public FunctionDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclareContext functionDeclare() {
		FunctionDeclareContext _localctx = new FunctionDeclareContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(AccessModifier);
			State = 322; Match(Function);
			State = 323; functionalDeclareArgList();
			State = 324; Match(Colon);
			State = 325; typeName();
			State = 326; Match(Id);
			State = 327; statementSeq();
			State = 328; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public ITerminalNode Procedure() { return GetToken(SLGrammarParser.Procedure, 0); }
		public FunctionalDeclareArgListContext functionalDeclareArgList() {
			return GetRuleContext<FunctionalDeclareArgListContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ProcedureDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterProcedureDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitProcedureDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclareContext procedureDeclare() {
		ProcedureDeclareContext _localctx = new ProcedureDeclareContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_procedureDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(AccessModifier);
			State = 331; Match(Procedure);
			State = 332; functionalDeclareArgList();
			State = 333; Match(Id);
			State = 334; statementSeq();
			State = 335; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModuleDeclareContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLGrammarParser.AccessModifier, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLGrammarParser.Semicolon, 0); }
		public VarModuleDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModuleDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterVarModuleDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitVarModuleDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModuleDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModuleDeclareContext varModuleDeclare() {
		VarModuleDeclareContext _localctx = new VarModuleDeclareContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_varModuleDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(AccessModifier);
			State = 338; declare();
			State = 339; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalDeclareArgListContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public FunctionalDeclareArgContext[] functionalDeclareArg() {
			return GetRuleContexts<FunctionalDeclareArgContext>();
		}
		public FunctionalDeclareArgContext functionalDeclareArg(int i) {
			return GetRuleContext<FunctionalDeclareArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLGrammarParser.Comma, i);
		}
		public FunctionalDeclareArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalDeclareArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionalDeclareArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionalDeclareArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalDeclareArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalDeclareArgListContext functionalDeclareArgList() {
		FunctionalDeclareArgListContext _localctx = new FunctionalDeclareArgListContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionalDeclareArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(LBrace);
			State = 351;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FunctionArgModifier:
				{
				State = 342; functionalDeclareArg();
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 343; Match(Comma);
					State = 344; functionalDeclareArg();
					}
					}
					State = 349;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 353; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalDeclareArgContext : ParserRuleContext {
		public ITerminalNode FunctionArgModifier() { return GetToken(SLGrammarParser.FunctionArgModifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public FunctionalDeclareArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalDeclareArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionalDeclareArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionalDeclareArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalDeclareArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalDeclareArgContext functionalDeclareArg() {
		FunctionalDeclareArgContext _localctx = new FunctionalDeclareArgContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_functionalDeclareArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(FunctionArgModifier);
			State = 356; typeName();
			State = 357; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleEntryContext : ParserRuleContext {
		public ITerminalNode Start() { return GetToken(SLGrammarParser.Start, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode Point() { return GetToken(SLGrammarParser.Point, 0); }
		public ModuleEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterModuleEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitModuleEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleEntryContext moduleEntry() {
		ModuleEntryContext _localctx = new ModuleEntryContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_moduleEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(Start);
			State = 360; statementSeq();
			State = 361; Match(End);
			State = 362; Match(Id);
			State = 363; Match(Point);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public RawContext[] raw() {
			return GetRuleContexts<RawContext>();
		}
		public RawContext raw(int i) {
			return GetRuleContext<RawContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_statementSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 367;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case Variable:
					case Const:
					case Let:
					case Return:
					case Input:
					case Output:
					case Call:
					case If:
					case While:
					case Repeat:
					case Using:
					case Pointer:
					case ArrayToken:
						{
						State = 365; statement();
						}
						break;
					case Raw:
						{
						State = 366; raw();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 371;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_statement);
		try {
			State = 374;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Let:
			case Return:
			case Input:
			case Output:
			case Call:
			case Using:
			case Pointer:
			case ArrayToken:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; simpleStatement();
				}
				break;
			case If:
			case While:
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; complexStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public ITerminalNode Semicolon() { return GetToken(SLGrammarParser.Semicolon, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public Return_valContext return_val() {
			return GetRuleContext<Return_valContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Pointer:
			case ArrayToken:
				{
				State = 376; declare();
				}
				break;
			case Let:
				{
				State = 377; let();
				}
				break;
			case Input:
				{
				State = 378; input();
				}
				break;
			case Output:
				{
				State = 379; output();
				}
				break;
			case Return:
				{
				State = 380; return_val();
				}
				break;
			case Call:
				{
				State = 381; call();
				}
				break;
			case Using:
				{
				State = 382; @using();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 385; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		public If_condContext if_cond() {
			return GetRuleContext<If_condContext>(0);
		}
		public While_condContext while_cond() {
			return GetRuleContext<While_condContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterComplexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitComplexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_complexStatement);
		try {
			State = 390;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; if_cond();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; while_cond();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; repeat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ConstDeclareContext constDeclare() {
			return GetRuleContext<ConstDeclareContext>(0);
		}
		public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_declare);
		try {
			State = 394;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Const:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; constDeclare();
				}
				break;
			case Variable:
			case Pointer:
			case ArrayToken:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; varDeclare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclareContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(SLGrammarParser.Const, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ConstDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterConstDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitConstDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclareContext constDeclare() {
		ConstDeclareContext _localctx = new ConstDeclareContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_constDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(Const);
			State = 397; typeName();
			State = 398; Match(Id);
			State = 399; Match(AssignToken);
			State = 402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 400; mathExpression();
				}
				break;

			case 2:
				{
				State = 401; boolExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareContext : ParserRuleContext {
		public ScalarDeclareContext scalarDeclare() {
			return GetRuleContext<ScalarDeclareContext>(0);
		}
		public ArrayDeclareContext arrayDeclare() {
			return GetRuleContext<ArrayDeclareContext>(0);
		}
		public PtrDeclareContext ptrDeclare() {
			return GetRuleContext<PtrDeclareContext>(0);
		}
		public VarDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterVarDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitVarDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareContext varDeclare() {
		VarDeclareContext _localctx = new VarDeclareContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_varDeclare);
		try {
			State = 407;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; scalarDeclare();
				}
				break;
			case ArrayToken:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; arrayDeclare();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 406; ptrDeclare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarDeclareContext : ParserRuleContext {
		public ITerminalNode Variable() { return GetToken(SLGrammarParser.Variable, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ScalarDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterScalarDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitScalarDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarDeclareContext scalarDeclare() {
		ScalarDeclareContext _localctx = new ScalarDeclareContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_scalarDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(Variable);
			State = 410; scalarType();
			State = 411; Match(Id);
			State = 416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 412; Match(AssignToken);
				State = 413; mathExpression();
				}
				break;

			case 2:
				{
				State = 414; Match(AssignToken);
				State = 415; boolExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclareContext : ParserRuleContext {
		public ArrayDeclareTypeContext arrayDeclareType() {
			return GetRuleContext<ArrayDeclareTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ArrayDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclareContext arrayDeclare() {
		ArrayDeclareContext _localctx = new ArrayDeclareContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_arrayDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; arrayDeclareType();
			State = 419; Match(Id);
			State = 422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AssignToken) {
				{
				State = 420; Match(AssignToken);
				State = 421; mathExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrDeclareContext : ParserRuleContext {
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLGrammarParser.Id, 0); }
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public PtrDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterPtrDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitPtrDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrDeclareContext ptrDeclare() {
		PtrDeclareContext _localctx = new PtrDeclareContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ptrDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; ptrType();
			State = 425; Match(Id);
			State = 428;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AssignToken) {
				{
				State = 426; Match(AssignToken);
				State = 427; mathExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclareTypeContext : ParserRuleContext {
		public ITerminalNode ArrayToken() { return GetToken(SLGrammarParser.ArrayToken, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayDeclareDimentionContext[] arrayDeclareDimention() {
			return GetRuleContexts<ArrayDeclareDimentionContext>();
		}
		public ArrayDeclareDimentionContext arrayDeclareDimention(int i) {
			return GetRuleContext<ArrayDeclareDimentionContext>(i);
		}
		public ArrayDeclareTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclareType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDeclareType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDeclareType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclareType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclareTypeContext arrayDeclareType() {
		ArrayDeclareTypeContext _localctx = new ArrayDeclareTypeContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_arrayDeclareType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(ArrayToken);
			State = 432;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 431; arrayDeclareDimention();
				}
				}
				State = 434;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 436; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclareDimentionContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLGrammarParser.LSBrace, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ITerminalNode RSBrace() { return GetToken(SLGrammarParser.RSBrace, 0); }
		public ArrayDeclareDimentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclareDimention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDeclareDimention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDeclareDimention(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclareDimention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclareDimentionContext arrayDeclareDimention() {
		ArrayDeclareDimentionContext _localctx = new ArrayDeclareDimentionContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_arrayDeclareDimention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(LSBrace);
			State = 439; mathExpression();
			State = 440; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArrayDeclareDimentionContext[] arrayDeclareDimention() {
			return GetRuleContexts<ArrayDeclareDimentionContext>();
		}
		public ArrayDeclareDimentionContext arrayDeclareDimention(int i) {
			return GetRuleContext<ArrayDeclareDimentionContext>(i);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; id();
			State = 444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 443; arrayDeclareDimention();
				}
				}
				State = 446;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLenPropertyContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode Point() { return GetToken(SLGrammarParser.Point, 0); }
		public ITerminalNode Length() { return GetToken(SLGrammarParser.Length, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public ITerminalNode IntValue() { return GetToken(SLGrammarParser.IntValue, 0); }
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public ArrayLenPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLenProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayLenProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayLenProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLenProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLenPropertyContext arrayLenProperty() {
		ArrayLenPropertyContext _localctx = new ArrayLenPropertyContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_arrayLenProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; id();
			State = 449; Match(Point);
			State = 450; Match(Length);
			State = 451; Match(LBrace);
			State = 452; Match(IntValue);
			State = 453; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(SLGrammarParser.Let, 0); }
		public SimpleLetContext simpleLet() {
			return GetRuleContext<SimpleLetContext>(0);
		}
		public ArrayLetContext arrayLet() {
			return GetRuleContext<ArrayLetContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(Let);
			State = 458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 456; simpleLet();
				}
				break;

			case 2:
				{
				State = 457; arrayLet();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLetContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public SimpleLetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLetContext simpleLet() {
		SimpleLetContext _localctx = new SimpleLetContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_simpleLet);
		try {
			State = 472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; id();
				State = 461; Match(AssignToken);
				State = 462; mathExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464; id();
				State = 465; Match(AssignToken);
				State = 466; boolExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 468; id();
				State = 469; Match(AssignToken);
				State = 470; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLetContext : ParserRuleContext {
		public ArrayElementContext arrayElement() {
			return GetRuleContext<ArrayElementContext>(0);
		}
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ArrayLetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArrayLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArrayLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLetContext arrayLet() {
		ArrayLetContext _localctx = new ArrayLetContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_arrayLet);
		try {
			State = 486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; arrayElement();
				State = 475; Match(AssignToken);
				State = 476; mathExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478; arrayElement();
				State = 479; Match(AssignToken);
				State = 480; boolExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 482; arrayElement();
				State = 483; Match(AssignToken);
				State = 484; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(SLGrammarParser.Using, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AssignToken() { return GetToken(SLGrammarParser.AssignToken, 0); }
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; Match(Using);
			State = 489; id();
			State = 490; Match(AssignToken);
			State = 491; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(SLGrammarParser.Return, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Return_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_val; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_val(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_val(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valContext return_val() {
		Return_valContext _localctx = new Return_valContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_return_val);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(Return);
			State = 495;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (Call - 12)) | (1L << (AddOp - 12)) | (1L << (SubOp - 12)) | (1L << (BoolNot - 12)) | (1L << (LBrace - 12)) | (1L << (LABrace - 12)) | (1L << (New - 12)) | (1L << (Nil - 12)) | (1L << (IntValue - 12)) | (1L << (RealValue - 12)) | (1L << (BoolValue - 12)) | (1L << (Id - 12)) | (1L << (StringLiteral - 12)))) != 0)) {
				{
				State = 494; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Input() { return GetToken(SLGrammarParser.Input, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLGrammarParser.Comma, i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(Input);
			State = 498; id();
			State = 503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 499; Match(Comma);
				State = 500; id();
				}
				}
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode Output() { return GetToken(SLGrammarParser.Output, 0); }
		public OutputArgumentContext[] outputArgument() {
			return GetRuleContexts<OutputArgumentContext>();
		}
		public OutputArgumentContext outputArgument(int i) {
			return GetRuleContext<OutputArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLGrammarParser.Comma, i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(Output);
			State = 507; outputArgument();
			State = 512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 508; Match(Comma);
				State = 509; outputArgument();
				}
				}
				State = 514;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputArgumentContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(SLGrammarParser.StringLiteral, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public OutputArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterOutputArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitOutputArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputArgumentContext outputArgument() {
		OutputArgumentContext _localctx = new OutputArgumentContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_outputArgument);
		try {
			State = 517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515; Match(StringLiteral);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516; exp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode Call() { return GetToken(SLGrammarParser.Call, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public CallArgListContext callArgList() {
			return GetRuleContext<CallArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(Call);
			State = 520; id();
			State = 521; Match(LBrace);
			State = 522; callArgList();
			State = 523; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgListContext : ParserRuleContext {
		public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLGrammarParser.Comma, i);
		}
		public CallArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterCallArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitCallArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgListContext callArgList() {
		CallArgListContext _localctx = new CallArgListContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_callArgList);
		int _la;
		try {
			State = 534;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Call:
			case AddOp:
			case SubOp:
			case BoolNot:
			case LBrace:
			case LABrace:
			case New:
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case Id:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 525; callArg();
				State = 530;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 526; Match(Comma);
					State = 527; callArg();
					}
					}
					State = 532;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				break;
			case RBrace:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterCallArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitCallArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_callArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_funcContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public CallArgListContext callArgList() {
			return GetRuleContext<CallArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public Call_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterCall_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitCall_func(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_funcContext call_func() {
		Call_funcContext _localctx = new Call_funcContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_call_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; id();
			State = 539; Match(LBrace);
			State = 540; callArgList();
			State = 541; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_condContext : ParserRuleContext {
		public If_condContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_cond; } }
	 
		public If_condContext() { }
		public virtual void CopyFrom(If_condContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseIfElseContext : If_condContext {
		public ITerminalNode If() { return GetToken(SLGrammarParser.If, 0); }
		public ITerminalNode[] LBrace() { return GetTokens(SLGrammarParser.LBrace); }
		public ITerminalNode LBrace(int i) {
			return GetToken(SLGrammarParser.LBrace, i);
		}
		public BoolExpressionContext[] boolExpression() {
			return GetRuleContexts<BoolExpressionContext>();
		}
		public BoolExpressionContext boolExpression(int i) {
			return GetRuleContext<BoolExpressionContext>(i);
		}
		public ITerminalNode[] RBrace() { return GetTokens(SLGrammarParser.RBrace); }
		public ITerminalNode RBrace(int i) {
			return GetToken(SLGrammarParser.RBrace, i);
		}
		public ITerminalNode[] Then() { return GetTokens(SLGrammarParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(SLGrammarParser.Then, i);
		}
		public StatementSeqContext[] statementSeq() {
			return GetRuleContexts<StatementSeqContext>();
		}
		public StatementSeqContext statementSeq(int i) {
			return GetRuleContext<StatementSeqContext>(i);
		}
		public ITerminalNode Else() { return GetToken(SLGrammarParser.Else, 0); }
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public ITerminalNode[] Elseif() { return GetTokens(SLGrammarParser.Elseif); }
		public ITerminalNode Elseif(int i) {
			return GetToken(SLGrammarParser.Elseif, i);
		}
		public IfElseIfElseContext(If_condContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterIfElseIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitIfElseIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfSingleContext : If_condContext {
		public ITerminalNode If() { return GetToken(SLGrammarParser.If, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public ITerminalNode Then() { return GetToken(SLGrammarParser.Then, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public IfSingleContext(If_condContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterIfSingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitIfSingle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_condContext if_cond() {
		If_condContext _localctx = new If_condContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_if_cond);
		int _la;
		try {
			State = 573;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				_localctx = new IfSingleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; Match(If);
				State = 544; Match(LBrace);
				State = 545; boolExpression();
				State = 546; Match(RBrace);
				State = 547; Match(Then);
				State = 548; statementSeq();
				State = 549; Match(End);
				}
				break;

			case 2:
				_localctx = new IfElseIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 551; Match(If);
				State = 552; Match(LBrace);
				State = 553; boolExpression();
				State = 554; Match(RBrace);
				State = 555; Match(Then);
				State = 556; statementSeq();
				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Elseif) {
					{
					{
					State = 557; Match(Elseif);
					State = 558; Match(LBrace);
					State = 559; boolExpression();
					State = 560; Match(RBrace);
					State = 561; Match(Then);
					State = 562; statementSeq();
					}
					}
					State = 568;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 569; Match(Else);
				State = 570; statementSeq();
				State = 571; Match(End);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_condContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(SLGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public ITerminalNode Do() { return GetToken(SLGrammarParser.Do, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public While_condContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_cond; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterWhile_cond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitWhile_cond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_cond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_condContext while_cond() {
		While_condContext _localctx = new While_condContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_while_cond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(While);
			State = 576; Match(LBrace);
			State = 577; boolExpression();
			State = 578; Match(RBrace);
			State = 579; Match(Do);
			State = 580; statementSeq();
			State = 581; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public ITerminalNode Repeat() { return GetToken(SLGrammarParser.Repeat, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode While() { return GetToken(SLGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(Repeat);
			State = 584; statementSeq();
			State = 585; Match(While);
			State = 586; Match(LBrace);
			State = 587; boolExpression();
			State = 588; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
	 
		public MathExpressionContext() { }
		public virtual void CopyFrom(MathExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathExpSumContext : MathExpressionContext {
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public ITerminalNode AddOp() { return GetToken(SLGrammarParser.AddOp, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public MathExpSumContext(MathExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathExpSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathExpSum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpSubContext : MathExpressionContext {
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public ITerminalNode SubOp() { return GetToken(SLGrammarParser.SubOp, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public MathExpSubContext(MathExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathExpSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathExpSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpEmptyContext : MathExpressionContext {
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public MathExpEmptyContext(MathExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathExpEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathExpEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		MathExpressionContext _localctx = new MathExpressionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_mathExpression);
		try {
			State = 599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				_localctx = new MathExpEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; mathTerm();
				}
				break;

			case 2:
				_localctx = new MathExpSumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 591; mathTerm();
				State = 592; Match(AddOp);
				State = 593; mathExpression();
				}
				break;

			case 3:
				_localctx = new MathExpSubContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 595; mathTerm();
				State = 596; Match(SubOp);
				State = 597; mathExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathTermContext : ParserRuleContext {
		public MathTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathTerm; } }
	 
		public MathTermContext() { }
		public virtual void CopyFrom(MathTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathTermDivContext : MathTermContext {
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public ITerminalNode DivOp() { return GetToken(SLGrammarParser.DivOp, 0); }
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public MathTermDivContext(MathTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathTermDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathTermDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathTermModContext : MathTermContext {
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public ITerminalNode ModOp() { return GetToken(SLGrammarParser.ModOp, 0); }
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public MathTermModContext(MathTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathTermMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathTermMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathTermMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathTermMulContext : MathTermContext {
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public ITerminalNode MulOp() { return GetToken(SLGrammarParser.MulOp, 0); }
		public MathTermContext mathTerm() {
			return GetRuleContext<MathTermContext>(0);
		}
		public MathTermMulContext(MathTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathTermMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathTermMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathTermMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathTermEmptyContext : MathTermContext {
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public MathTermEmptyContext(MathTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathTermEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathTermEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathTermEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathTermContext mathTerm() {
		MathTermContext _localctx = new MathTermContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_mathTerm);
		try {
			State = 614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				_localctx = new MathTermEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; mathFactor();
				}
				break;

			case 2:
				_localctx = new MathTermMulContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; mathFactor();
				State = 603; Match(MulOp);
				State = 604; mathTerm();
				}
				break;

			case 3:
				_localctx = new MathTermDivContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; mathFactor();
				State = 607; Match(DivOp);
				State = 608; mathTerm();
				}
				break;

			case 4:
				_localctx = new MathTermModContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 610; mathFactor();
				State = 611; Match(ModOp);
				State = 612; mathTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathFactorContext : ParserRuleContext {
		public MathFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathFactor; } }
	 
		public MathFactorContext() { }
		public virtual void CopyFrom(MathFactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathFactorUnaryMinusContext : MathFactorContext {
		public ITerminalNode SubOp() { return GetToken(SLGrammarParser.SubOp, 0); }
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public MathFactorUnaryMinusContext(MathFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathFactorUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathFactorUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathFactorUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathFactorBracketsContext : MathFactorContext {
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public MathFactorBracketsContext(MathFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathFactorBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathFactorBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathFactorBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathFactorEmptyContext : MathFactorContext {
		public ExpAtomContext expAtom() {
			return GetRuleContext<ExpAtomContext>(0);
		}
		public MathFactorEmptyContext(MathFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathFactorEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathFactorEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathFactorEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathFactorUnaryPlusContext : MathFactorContext {
		public ITerminalNode AddOp() { return GetToken(SLGrammarParser.AddOp, 0); }
		public MathFactorContext mathFactor() {
			return GetRuleContext<MathFactorContext>(0);
		}
		public MathFactorUnaryPlusContext(MathFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathFactorUnaryPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathFactorUnaryPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathFactorUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathFactorContext mathFactor() {
		MathFactorContext _localctx = new MathFactorContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_mathFactor);
		try {
			State = 625;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Call:
			case LABrace:
			case New:
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case Id:
			case StringLiteral:
				_localctx = new MathFactorEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 616; expAtom();
				}
				break;
			case LBrace:
				_localctx = new MathFactorBracketsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 617; Match(LBrace);
				State = 618; mathExpression();
				State = 619; Match(RBrace);
				}
				break;
			case AddOp:
				_localctx = new MathFactorUnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 621; Match(AddOp);
				State = 622; mathFactor();
				}
				break;
			case SubOp:
				_localctx = new MathFactorUnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 623; Match(SubOp);
				State = 624; mathFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
	 
		public BoolExpressionContext() { }
		public virtual void CopyFrom(BoolExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicOrContext : BoolExpressionContext {
		public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		public ITerminalNode BoolOr() { return GetToken(SLGrammarParser.BoolOr, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public LogicOrContext(BoolExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolOrEmptyContext : BoolExpressionContext {
		public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		public BoolOrEmptyContext(BoolExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolOrEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolOrEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOrEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_boolExpression);
		try {
			State = 632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				_localctx = new BoolOrEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; boolAnd();
				}
				break;

			case 2:
				_localctx = new LogicOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; boolAnd();
				State = 629; Match(BoolOr);
				State = 630; boolExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	 
		public BoolAndContext() { }
		public virtual void CopyFrom(BoolAndContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAndEmptyContext : BoolAndContext {
		public BoolEqualityContext boolEquality() {
			return GetRuleContext<BoolEqualityContext>(0);
		}
		public BoolAndEmptyContext(BoolAndContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAndEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAndEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAndEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndContext : BoolAndContext {
		public BoolEqualityContext boolEquality() {
			return GetRuleContext<BoolEqualityContext>(0);
		}
		public ITerminalNode BoolAnd() { return GetToken(SLGrammarParser.BoolAnd, 0); }
		public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		public LogicAndContext(BoolAndContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_boolAnd);
		try {
			State = 639;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				_localctx = new BoolAndEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 634; boolEquality();
				}
				break;

			case 2:
				_localctx = new LogicAndContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; boolEquality();
				State = 636; Match(BoolAnd);
				State = 637; boolAnd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolEqualityContext : ParserRuleContext {
		public BoolEqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolEquality; } }
	 
		public BoolEqualityContext() { }
		public virtual void CopyFrom(BoolEqualityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolEqualityEmptyContext : BoolEqualityContext {
		public BoolInequalityContext boolInequality() {
			return GetRuleContext<BoolInequalityContext>(0);
		}
		public BoolEqualityEmptyContext(BoolEqualityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolEqualityEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolEqualityEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEqualityEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathNotEqualContext : BoolEqualityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolNeq() { return GetToken(SLGrammarParser.BoolNeq, 0); }
		public MathNotEqualContext(BoolEqualityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolNotEqualContext : BoolEqualityContext {
		public BoolInequalityContext boolInequality() {
			return GetRuleContext<BoolInequalityContext>(0);
		}
		public ITerminalNode BoolNeq() { return GetToken(SLGrammarParser.BoolNeq, 0); }
		public BoolEqualityContext boolEquality() {
			return GetRuleContext<BoolEqualityContext>(0);
		}
		public BoolNotEqualContext(BoolEqualityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolEqualContext : BoolEqualityContext {
		public BoolInequalityContext boolInequality() {
			return GetRuleContext<BoolInequalityContext>(0);
		}
		public ITerminalNode BoolEq() { return GetToken(SLGrammarParser.BoolEq, 0); }
		public BoolEqualityContext boolEquality() {
			return GetRuleContext<BoolEqualityContext>(0);
		}
		public BoolEqualContext(BoolEqualityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathEqualContext : BoolEqualityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolEq() { return GetToken(SLGrammarParser.BoolEq, 0); }
		public MathEqualContext(BoolEqualityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterMathEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitMathEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolEqualityContext boolEquality() {
		BoolEqualityContext _localctx = new BoolEqualityContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_boolEquality);
		try {
			State = 658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				_localctx = new BoolEqualityEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 641; boolInequality();
				}
				break;

			case 2:
				_localctx = new MathEqualContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 642; mathExpression();
				State = 643; Match(BoolEq);
				State = 644; mathExpression();
				}
				break;

			case 3:
				_localctx = new BoolEqualContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 646; boolInequality();
				State = 647; Match(BoolEq);
				State = 648; boolEquality();
				}
				break;

			case 4:
				_localctx = new MathNotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 650; mathExpression();
				State = 651; Match(BoolNeq);
				State = 652; mathExpression();
				}
				break;

			case 5:
				_localctx = new BoolNotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 654; boolInequality();
				State = 655; Match(BoolNeq);
				State = 656; boolEquality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolInequalityContext : ParserRuleContext {
		public BoolInequalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolInequality; } }
	 
		public BoolInequalityContext() { }
		public virtual void CopyFrom(BoolInequalityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BiggerContext : BoolInequalityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolG() { return GetToken(SLGrammarParser.BoolG, 0); }
		public BiggerContext(BoolInequalityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LesserContext : BoolInequalityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolL() { return GetToken(SLGrammarParser.BoolL, 0); }
		public LesserContext(BoolInequalityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterLesser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitLesser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LesserOrEqualContext : BoolInequalityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolLeq() { return GetToken(SLGrammarParser.BoolLeq, 0); }
		public LesserOrEqualContext(BoolInequalityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterLesserOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitLesserOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesserOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolInequalityEmptyContext : BoolInequalityContext {
		public BoolFactorContext boolFactor() {
			return GetRuleContext<BoolFactorContext>(0);
		}
		public BoolInequalityEmptyContext(BoolInequalityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolInequalityEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolInequalityEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolInequalityEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BiggerOrEqualContext : BoolInequalityContext {
		public MathExpressionContext[] mathExpression() {
			return GetRuleContexts<MathExpressionContext>();
		}
		public MathExpressionContext mathExpression(int i) {
			return GetRuleContext<MathExpressionContext>(i);
		}
		public ITerminalNode BoolGeq() { return GetToken(SLGrammarParser.BoolGeq, 0); }
		public BiggerOrEqualContext(BoolInequalityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBiggerOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBiggerOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBiggerOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolInequalityContext boolInequality() {
		BoolInequalityContext _localctx = new BoolInequalityContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_boolInequality);
		try {
			State = 677;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				_localctx = new BoolInequalityEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; boolFactor();
				}
				break;

			case 2:
				_localctx = new BiggerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; mathExpression();
				State = 662; Match(BoolG);
				State = 663; mathExpression();
				}
				break;

			case 3:
				_localctx = new LesserContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 665; mathExpression();
				State = 666; Match(BoolL);
				State = 667; mathExpression();
				}
				break;

			case 4:
				_localctx = new BiggerOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 669; mathExpression();
				State = 670; Match(BoolGeq);
				State = 671; mathExpression();
				}
				break;

			case 5:
				_localctx = new LesserOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 673; mathExpression();
				State = 674; Match(BoolLeq);
				State = 675; mathExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolFactorContext : ParserRuleContext {
		public BoolFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolFactor; } }
	 
		public BoolFactorContext() { }
		public virtual void CopyFrom(BoolFactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAtomBracketsContext : BoolFactorContext {
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public BoolAtomBracketsContext(BoolFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAtomBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAtomBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAtomBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : BoolFactorContext {
		public ITerminalNode BoolNot() { return GetToken(SLGrammarParser.BoolNot, 0); }
		public ExpAtomContext expAtom() {
			return GetRuleContext<ExpAtomContext>(0);
		}
		public NotContext(BoolFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAtomEmptyContext : BoolFactorContext {
		public ExpAtomContext expAtom() {
			return GetRuleContext<ExpAtomContext>(0);
		}
		public BoolAtomEmptyContext(BoolFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAtomEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAtomEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAtomEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAtomBracketsNotContext : BoolFactorContext {
		public ITerminalNode BoolNot() { return GetToken(SLGrammarParser.BoolNot, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public BoolAtomBracketsNotContext(BoolFactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolAtomBracketsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolAtomBracketsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAtomBracketsNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolFactorContext boolFactor() {
		BoolFactorContext _localctx = new BoolFactorContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_boolFactor);
		try {
			State = 691;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				_localctx = new BoolAtomEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 679; expAtom();
				}
				break;

			case 2:
				_localctx = new NotContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 680; Match(BoolNot);
				State = 681; expAtom();
				}
				break;

			case 3:
				_localctx = new BoolAtomBracketsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 682; Match(LBrace);
				State = 683; boolExpression();
				State = 684; Match(RBrace);
				}
				break;

			case 4:
				_localctx = new BoolAtomBracketsNotContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 686; Match(BoolNot);
				State = 687; Match(LBrace);
				State = 688; boolExpression();
				State = 689; Match(RBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(SLGrammarParser.New, 0); }
		public ITerminalNode LBrace() { return GetToken(SLGrammarParser.LBrace, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLGrammarParser.RBrace, 0); }
		public NewExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterNewExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitNewExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpContext newExp() {
		NewExpContext _localctx = new NewExpContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_newExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(New);
			State = 694; Match(LBrace);
			State = 695; id();
			State = 696; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrExpAtomContext : ParserRuleContext {
		public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public ITerminalNode Nil() { return GetToken(SLGrammarParser.Nil, 0); }
		public PtrExpAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrExpAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterPtrExpAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitPtrExpAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrExpAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrExpAtomContext ptrExpAtom() {
		PtrExpAtomContext _localctx = new PtrExpAtomContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_ptrExpAtom);
		try {
			State = 700;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case New:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698; newExp();
				}
				break;
			case Nil:
				EnterOuterAlt(_localctx, 2);
				{
				State = 699; Match(Nil);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpAtomContext : ParserRuleContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public ArrayLenPropertyContext arrayLenProperty() {
			return GetRuleContext<ArrayLenPropertyContext>(0);
		}
		public ArrayElementContext arrayElement() {
			return GetRuleContext<ArrayElementContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(SLGrammarParser.IntValue, 0); }
		public ITerminalNode RealValue() { return GetToken(SLGrammarParser.RealValue, 0); }
		public ITerminalNode BoolValue() { return GetToken(SLGrammarParser.BoolValue, 0); }
		public Call_funcContext call_func() {
			return GetRuleContext<Call_funcContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(SLGrammarParser.StringLiteral, 0); }
		public PtrExpAtomContext ptrExpAtom() {
			return GetRuleContext<PtrExpAtomContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ExpAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterExpAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitExpAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpAtomContext expAtom() {
		ExpAtomContext _localctx = new ExpAtomContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_expAtom);
		int _la;
		try {
			State = 711;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 702; call();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703; arrayLenProperty();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 704; arrayElement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 705; id();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 706;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntValue) | (1L << RealValue) | (1L << BoolValue))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 707; call_func();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 708; Match(StringLiteral);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 709; ptrExpAtom();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 710; array();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(SLGrammarParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(SLGrammarParser.Id, i);
		}
		public ITerminalNode Point() { return GetToken(SLGrammarParser.Point, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 713; Match(Id);
				State = 714; Match(Point);
				}
				break;
			}
			State = 717; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LABrace() { return GetToken(SLGrammarParser.LABrace, 0); }
		public ITerminalNode RABrace() { return GetToken(SLGrammarParser.RABrace, 0); }
		public ExpAtomContext[] expAtom() {
			return GetRuleContexts<ExpAtomContext>();
		}
		public ExpAtomContext expAtom(int i) {
			return GetRuleContext<ExpAtomContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLGrammarParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; Match(LABrace);
			State = 728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (Call - 12)) | (1L << (LABrace - 12)) | (1L << (New - 12)) | (1L << (Nil - 12)) | (1L << (IntValue - 12)) | (1L << (RealValue - 12)) | (1L << (BoolValue - 12)) | (1L << (Id - 12)) | (1L << (StringLiteral - 12)))) != 0)) {
				{
				State = 720; expAtom();
				State = 725;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 721; Match(Comma);
					State = 722; expAtom();
					}
					}
					State = 727;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 730; Match(RABrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_exp);
		try {
			State = 734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 732; mathExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 733; boolExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawContext : ParserRuleContext {
		public AnyContext any() {
			return GetRuleContext<AnyContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLGrammarParser.End, 0); }
		public RawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterRaw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitRaw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawContext raw() {
		RawContext _localctx = new RawContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_raw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; Match(Raw);
			State = 737; any();
			State = 738; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyContext : ParserRuleContext {
		public AnyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.EnterAny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLGrammarListener typedListener = listener as ISLGrammarListener;
			if (typedListener != null) typedListener.ExitAny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLGrammarVisitor<TResult> typedVisitor = visitor as ISLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyContext any() {
		AnyContext _localctx = new AnyContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_any);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 740;
					MatchWildcard();
					}
					} 
				}
				State = 745;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x45\x2ED\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x3\x2\x3\x2\x5\x2\xA1\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"\xA8\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xAE\n\x4\x3\x5\x3\x5\x5\x5\xB2"+
		"\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\xC4\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x6\v"+
		"\xCD\n\v\r\v\xE\v\xCE\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\a\xE\xDB\n\xE\f\xE\xE\xE\xDE\v\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xED\n\x11"+
		"\f\x11\xE\x11\xF0\v\x11\x3\x12\x5\x12\xF3\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\xFA\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x107\n\x15\f\x15\xE\x15\x10A"+
		"\v\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x110\n\x16\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x5\x1A\x12A\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x5\x1B\x137\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3"+
		" \x3 \a \x15C\n \f \xE \x15F\v \x3 \x5 \x162\n \x3 \x3 \x3!\x3!\x3!\x3"+
		"!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\a#\x172\n#\f#\xE#\x175\v#\x3$"+
		"\x3$\x5$\x179\n$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x182\n%\x3%\x3%\x3&\x3"+
		"&\x3&\x5&\x189\n&\x3\'\x3\'\x5\'\x18D\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x5("+
		"\x195\n(\x3)\x3)\x3)\x5)\x19A\n)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x1A3"+
		"\n*\x3+\x3+\x3+\x3+\x5+\x1A9\n+\x3,\x3,\x3,\x3,\x5,\x1AF\n,\x3-\x3-\x6"+
		"-\x1B3\n-\r-\xE-\x1B4\x3-\x3-\x3.\x3.\x3.\x3.\x3/\x3/\x6/\x1BF\n/\r/\xE"+
		"/\x1C0\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31"+
		"\x3\x31\x5\x31\x1CD\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1DB\n\x32\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x5\x33\x1E9\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x5"+
		"\x35\x1F2\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x1F8\n\x36\f\x36\xE"+
		"\x36\x1FB\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x201\n\x37\f\x37\xE"+
		"\x37\x204\v\x37\x3\x38\x3\x38\x5\x38\x208\n\x38\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3:\x3:\x3:\a:\x213\n:\f:\xE:\x216\v:\x3:\x5:\x219"+
		"\n:\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\a=\x237\n=\f=\xE=\x23A\v"+
		"=\x3=\x3=\x3=\x3=\x5=\x240\n=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?"+
		"\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x25A\n@\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x269\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x274\n\x42\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x5\x43\x27B\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44"+
		"\x282\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x295"+
		"\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2A8\n"+
		"\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2B6\nG\x3H\x3"+
		"H\x3H\x3H\x3H\x3I\x3I\x5I\x2BF\nI\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J"+
		"\x5J\x2CA\nJ\x3K\x3K\x5K\x2CE\nK\x3K\x3K\x3L\x3L\x3L\x3L\aL\x2D6\nL\f"+
		"L\xEL\x2D9\vL\x5L\x2DB\nL\x3L\x3L\x3M\x3M\x5M\x2E1\nM\x3N\x3N\x3N\x3N"+
		"\x3O\aO\x2E8\nO\fO\xEO\x2EB\vO\x3O\x3\x2E9\x2\x2P\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x2\x3\x3\x2?"+
		"\x41\x2FE\x2\xA0\x3\x2\x2\x2\x4\xA2\x3\x2\x2\x2\x6\xAD\x3\x2\x2\x2\b\xB1"+
		"\x3\x2\x2\x2\n\xB3\x3\x2\x2\x2\f\xB5\x3\x2\x2\x2\xE\xBA\x3\x2\x2\x2\x10"+
		"\xBD\x3\x2\x2\x2\x12\xC7\x3\x2\x2\x2\x14\xCA\x3\x2\x2\x2\x16\xD2\x3\x2"+
		"\x2\x2\x18\xD5\x3\x2\x2\x2\x1A\xDC\x3\x2\x2\x2\x1C\xDF\x3\x2\x2\x2\x1E"+
		"\xE2\x3\x2\x2\x2 \xEE\x3\x2\x2\x2\"\xF2\x3\x2\x2\x2$\xF9\x3\x2\x2\x2&"+
		"\xFB\x3\x2\x2\x2(\x108\x3\x2\x2\x2*\x10F\x3\x2\x2\x2,\x111\x3\x2\x2\x2"+
		".\x115\x3\x2\x2\x2\x30\x11F\x3\x2\x2\x2\x32\x127\x3\x2\x2\x2\x34\x134"+
		"\x3\x2\x2\x2\x36\x13F\x3\x2\x2\x2\x38\x143\x3\x2\x2\x2:\x14C\x3\x2\x2"+
		"\x2<\x153\x3\x2\x2\x2>\x157\x3\x2\x2\x2@\x165\x3\x2\x2\x2\x42\x169\x3"+
		"\x2\x2\x2\x44\x173\x3\x2\x2\x2\x46\x178\x3\x2\x2\x2H\x181\x3\x2\x2\x2"+
		"J\x188\x3\x2\x2\x2L\x18C\x3\x2\x2\x2N\x18E\x3\x2\x2\x2P\x199\x3\x2\x2"+
		"\x2R\x19B\x3\x2\x2\x2T\x1A4\x3\x2\x2\x2V\x1AA\x3\x2\x2\x2X\x1B0\x3\x2"+
		"\x2\x2Z\x1B8\x3\x2\x2\x2\\\x1BC\x3\x2\x2\x2^\x1C2\x3\x2\x2\x2`\x1C9\x3"+
		"\x2\x2\x2\x62\x1DA\x3\x2\x2\x2\x64\x1E8\x3\x2\x2\x2\x66\x1EA\x3\x2\x2"+
		"\x2h\x1EF\x3\x2\x2\x2j\x1F3\x3\x2\x2\x2l\x1FC\x3\x2\x2\x2n\x207\x3\x2"+
		"\x2\x2p\x209\x3\x2\x2\x2r\x218\x3\x2\x2\x2t\x21A\x3\x2\x2\x2v\x21C\x3"+
		"\x2\x2\x2x\x23F\x3\x2\x2\x2z\x241\x3\x2\x2\x2|\x249\x3\x2\x2\x2~\x259"+
		"\x3\x2\x2\x2\x80\x268\x3\x2\x2\x2\x82\x273\x3\x2\x2\x2\x84\x27A\x3\x2"+
		"\x2\x2\x86\x281\x3\x2\x2\x2\x88\x294\x3\x2\x2\x2\x8A\x2A7\x3\x2\x2\x2"+
		"\x8C\x2B5\x3\x2\x2\x2\x8E\x2B7\x3\x2\x2\x2\x90\x2BE\x3\x2\x2\x2\x92\x2C9"+
		"\x3\x2\x2\x2\x94\x2CD\x3\x2\x2\x2\x96\x2D1\x3\x2\x2\x2\x98\x2E0\x3\x2"+
		"\x2\x2\x9A\x2E2\x3\x2\x2\x2\x9C\x2E9\x3\x2\x2\x2\x9E\xA1\x5\x6\x4\x2\x9F"+
		"\xA1\x5\x14\v\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\x3\x3\x2"+
		"\x2\x2\xA2\xA7\a\x35\x2\x2\xA3\xA4\a,\x2\x2\xA4\xA5\x5\x94K\x2\xA5\xA6"+
		"\a-\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA3\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2"+
		"\xA8\x5\x3\x2\x2\x2\xA9\xAE\x5\n\x6\x2\xAA\xAE\x5\b\x5\x2\xAB\xAE\x5\x94"+
		"K\x2\xAC\xAE\x5\x4\x3\x2\xAD\xA9\x3\x2\x2\x2\xAD\xAA\x3\x2\x2\x2\xAD\xAB"+
		"\x3\x2\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\a\x3\x2\x2\x2\xAF\xB2\x5\xE\b\x2"+
		"\xB0\xB2\x5\f\a\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\t\x3\x2"+
		"\x2\x2\xB3\xB4\a>\x2\x2\xB4\v\x3\x2\x2\x2\xB5\xB6\a*\x2\x2\xB6\xB7\x5"+
		"\x10\t\x2\xB7\xB8\a\x3\x2\x2\xB8\xB9\x5\x2\x2\x2\xB9\r\x3\x2\x2\x2\xBA"+
		"\xBB\a)\x2\x2\xBB\xBC\x5\x10\t\x2\xBC\xF\x3\x2\x2\x2\xBD\xC3\a,\x2\x2"+
		"\xBE\xBF\x5\x12\n\x2\xBF\xC0\a\x5\x2\x2\xC0\xC1\x5\x12\n\x2\xC1\xC4\x3"+
		"\x2\x2\x2\xC2\xC4\x3\x2\x2\x2\xC3\xBE\x3\x2\x2\x2\xC3\xC2\x3\x2\x2\x2"+
		"\xC4\xC5\x3\x2\x2\x2\xC5\xC6\a-\x2\x2\xC6\x11\x3\x2\x2\x2\xC7\xC8\a\x37"+
		"\x2\x2\xC8\xC9\x5\x2\x2\x2\xC9\x13\x3\x2\x2\x2\xCA\xCC\a\x36\x2\x2\xCB"+
		"\xCD\x5\x16\f\x2\xCC\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCC\x3\x2"+
		"\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD1\x5\x6\x4\x2\xD1"+
		"\x15\x3\x2\x2\x2\xD2\xD3\a.\x2\x2\xD3\xD4\a/\x2\x2\xD4\x17\x3\x2\x2\x2"+
		"\xD5\xD6\x5\x1A\xE\x2\xD6\xD7\x5\x1E\x10\x2\xD7\x19\x3\x2\x2\x2\xD8\xDB"+
		"\x5\x1C\xF\x2\xD9\xDB\x5\x9AN\x2\xDA\xD8\x3\x2\x2\x2\xDA\xD9\x3\x2\x2"+
		"\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\x1B"+
		"\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE0\a&\x2\x2\xE0\xE1\a\x42\x2\x2"+
		"\xE1\x1D\x3\x2\x2\x2\xE2\xE3\a%\x2\x2\xE3\xE4\a\x42\x2\x2\xE4\xE5\x5 "+
		"\x11\x2\xE5\xE6\x5\x42\"\x2\xE6\x1F\x3\x2\x2\x2\xE7\xED\x5\x38\x1D\x2"+
		"\xE8\xED\x5:\x1E\x2\xE9\xED\x5\x9AN\x2\xEA\xED\x5<\x1F\x2\xEB\xED\x5&"+
		"\x14\x2\xEC\xE7\x3\x2\x2\x2\xEC\xE8\x3\x2\x2\x2\xEC\xE9\x3\x2\x2\x2\xEC"+
		"\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2"+
		"\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF!\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF1\xF3"+
		"\a;\x2\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3#\x3\x2\x2\x2\xF4"+
		"\xF5\a:\x2\x2\xF5\xF6\a,\x2\x2\xF6\xF7\x5\x94K\x2\xF7\xF8\a-\x2\x2\xF8"+
		"\xFA\x3\x2\x2\x2\xF9\xF4\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA%\x3\x2\x2"+
		"\x2\xFB\xFC\a\x38\x2\x2\xFC\xFD\x5\"\x12\x2\xFD\xFE\a\x39\x2\x2\xFE\xFF"+
		"\a\x42\x2\x2\xFF\x100\x5$\x13\x2\x100\x101\x5(\x15\x2\x101\x102\a(\x2"+
		"\x2\x102\'\x3\x2\x2\x2\x103\x107\x5*\x16\x2\x104\x107\x5\x9AN\x2\x105"+
		"\x107\x5\x36\x1C\x2\x106\x103\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x105"+
		"\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3"+
		"\x2\x2\x2\x109)\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x110\x5\x32\x1A"+
		"\x2\x10C\x110\x5\x34\x1B\x2\x10D\x110\x5.\x18\x2\x10E\x110\x5\x30\x19"+
		"\x2\x10F\x10B\x3\x2\x2\x2\x10F\x10C\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2"+
		"\x10F\x10E\x3\x2\x2\x2\x110+\x3\x2\x2\x2\x111\x112\a,\x2\x2\x112\x113"+
		"\x5@!\x2\x113\x114\a-\x2\x2\x114-\x3\x2\x2\x2\x115\x116\a\x38\x2\x2\x116"+
		"\x117\a<\x2\x2\x117\x118\x5,\x17\x2\x118\x119\a)\x2\x2\x119\x11A\x5> "+
		"\x2\x11A\x11B\a\x3\x2\x2\x11B\x11C\x5\x2\x2\x2\x11C\x11D\a\x42\x2\x2\x11D"+
		"\x11E\a\x4\x2\x2\x11E/\x3\x2\x2\x2\x11F\x120\a\x38\x2\x2\x120\x121\a<"+
		"\x2\x2\x121\x122\x5,\x17\x2\x122\x123\a*\x2\x2\x123\x124\x5> \x2\x124"+
		"\x125\a\x42\x2\x2\x125\x126\a\x4\x2\x2\x126\x31\x3\x2\x2\x2\x127\x129"+
		"\a\x38\x2\x2\x128\x12A\a=\x2\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3\x2"+
		"\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x5,\x17\x2\x12C\x12D\a)\x2\x2\x12D"+
		"\x12E\x5> \x2\x12E\x12F\a\x3\x2\x2\x12F\x130\x5\x2\x2\x2\x130\x131\a\x42"+
		"\x2\x2\x131\x132\x5\x44#\x2\x132\x133\a(\x2\x2\x133\x33\x3\x2\x2\x2\x134"+
		"\x136\a\x38\x2\x2\x135\x137\a=\x2\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3"+
		"\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\x5,\x17\x2\x139\x13A\a*\x2\x2"+
		"\x13A\x13B\x5> \x2\x13B\x13C\a\x42\x2\x2\x13C\x13D\x5\x44#\x2\x13D\x13E"+
		"\a(\x2\x2\x13E\x35\x3\x2\x2\x2\x13F\x140\a\x38\x2\x2\x140\x141\x5P)\x2"+
		"\x141\x142\a\x4\x2\x2\x142\x37\x3\x2\x2\x2\x143\x144\a\x38\x2\x2\x144"+
		"\x145\a)\x2\x2\x145\x146\x5> \x2\x146\x147\a\x3\x2\x2\x147\x148\x5\x2"+
		"\x2\x2\x148\x149\a\x42\x2\x2\x149\x14A\x5\x44#\x2\x14A\x14B\a(\x2\x2\x14B"+
		"\x39\x3\x2\x2\x2\x14C\x14D\a\x38\x2\x2\x14D\x14E\a*\x2\x2\x14E\x14F\x5"+
		"> \x2\x14F\x150\a\x42\x2\x2\x150\x151\x5\x44#\x2\x151\x152\a(\x2\x2\x152"+
		";\x3\x2\x2\x2\x153\x154\a\x38\x2\x2\x154\x155\x5L\'\x2\x155\x156\a\x4"+
		"\x2\x2\x156=\x3\x2\x2\x2\x157\x161\a,\x2\x2\x158\x15D\x5@!\x2\x159\x15A"+
		"\a\x5\x2\x2\x15A\x15C\x5@!\x2\x15B\x159\x3\x2\x2\x2\x15C\x15F\x3\x2\x2"+
		"\x2\x15D\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x162\x3\x2\x2\x2"+
		"\x15F\x15D\x3\x2\x2\x2\x160\x162\x3\x2\x2\x2\x161\x158\x3\x2\x2\x2\x161"+
		"\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\a-\x2\x2\x164?\x3\x2"+
		"\x2\x2\x165\x166\a\x37\x2\x2\x166\x167\x5\x2\x2\x2\x167\x168\a\x42\x2"+
		"\x2\x168\x41\x3\x2\x2\x2\x169\x16A\a\'\x2\x2\x16A\x16B\x5\x44#\x2\x16B"+
		"\x16C\a(\x2\x2\x16C\x16D\a\x42\x2\x2\x16D\x16E\a\x6\x2\x2\x16E\x43\x3"+
		"\x2\x2\x2\x16F\x172\x5\x46$\x2\x170\x172\x5\x9AN\x2\x171\x16F\x3\x2\x2"+
		"\x2\x171\x170\x3\x2\x2\x2\x172\x175\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2"+
		"\x173\x174\x3\x2\x2\x2\x174\x45\x3\x2\x2\x2\x175\x173\x3\x2\x2\x2\x176"+
		"\x179\x5H%\x2\x177\x179\x5J&\x2\x178\x176\x3\x2\x2\x2\x178\x177\x3\x2"+
		"\x2\x2\x179G\x3\x2\x2\x2\x17A\x182\x5L\'\x2\x17B\x182\x5`\x31\x2\x17C"+
		"\x182\x5j\x36\x2\x17D\x182\x5l\x37\x2\x17E\x182\x5h\x35\x2\x17F\x182\x5"+
		"p\x39\x2\x180\x182\x5\x66\x34\x2\x181\x17A\x3\x2\x2\x2\x181\x17B\x3\x2"+
		"\x2\x2\x181\x17C\x3\x2\x2\x2\x181\x17D\x3\x2\x2\x2\x181\x17E\x3\x2\x2"+
		"\x2\x181\x17F\x3\x2\x2\x2\x181\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2"+
		"\x183\x184\a\x4\x2\x2\x184I\x3\x2\x2\x2\x185\x189\x5x=\x2\x186\x189\x5"+
		"z>\x2\x187\x189\x5|?\x2\x188\x185\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188"+
		"\x187\x3\x2\x2\x2\x189K\x3\x2\x2\x2\x18A\x18D\x5N(\x2\x18B\x18D\x5P)\x2"+
		"\x18C\x18A\x3\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18DM\x3\x2\x2\x2\x18E\x18F"+
		"\a\b\x2\x2\x18F\x190\x5\x2\x2\x2\x190\x191\a\x42\x2\x2\x191\x194\a\x32"+
		"\x2\x2\x192\x195\x5~@\x2\x193\x195\x5\x84\x43\x2\x194\x192\x3\x2\x2\x2"+
		"\x194\x193\x3\x2\x2\x2\x195O\x3\x2\x2\x2\x196\x19A\x5R*\x2\x197\x19A\x5"+
		"T+\x2\x198\x19A\x5V,\x2\x199\x196\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x199"+
		"\x198\x3\x2\x2\x2\x19AQ\x3\x2\x2\x2\x19B\x19C\a\a\x2\x2\x19C\x19D\x5\x6"+
		"\x4\x2\x19D\x1A2\a\x42\x2\x2\x19E\x19F\a\x32\x2\x2\x19F\x1A3\x5~@\x2\x1A0"+
		"\x1A1\a\x32\x2\x2\x1A1\x1A3\x5\x84\x43\x2\x1A2\x19E\x3\x2\x2\x2\x1A2\x1A0"+
		"\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3S\x3\x2\x2\x2\x1A4\x1A5\x5X-\x2"+
		"\x1A5\x1A8\a\x42\x2\x2\x1A6\x1A7\a\x32\x2\x2\x1A7\x1A9\x5~@\x2\x1A8\x1A6"+
		"\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9U\x3\x2\x2\x2\x1AA\x1AB\x5\x4\x3"+
		"\x2\x1AB\x1AE\a\x42\x2\x2\x1AC\x1AD\a\x32\x2\x2\x1AD\x1AF\x5~@\x2\x1AE"+
		"\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AFW\x3\x2\x2\x2\x1B0\x1B2\a"+
		"\x36\x2\x2\x1B1\x1B3\x5Z.\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2"+
		"\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2"+
		"\x1B6\x1B7\x5\x6\x4\x2\x1B7Y\x3\x2\x2\x2\x1B8\x1B9\a.\x2\x2\x1B9\x1BA"+
		"\x5~@\x2\x1BA\x1BB\a/\x2\x2\x1BB[\x3\x2\x2\x2\x1BC\x1BE\x5\x94K\x2\x1BD"+
		"\x1BF\x5Z.\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1BE\x3"+
		"\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1]\x3\x2\x2\x2\x1C2\x1C3\x5\x94K\x2"+
		"\x1C3\x1C4\a\x6\x2\x2\x1C4\x1C5\a\t\x2\x2\x1C5\x1C6\a,\x2\x2\x1C6\x1C7"+
		"\a?\x2\x2\x1C7\x1C8\a-\x2\x2\x1C8_\x3\x2\x2\x2\x1C9\x1CC\a\n\x2\x2\x1CA"+
		"\x1CD\x5\x62\x32\x2\x1CB\x1CD\x5\x64\x33\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC"+
		"\x1CB\x3\x2\x2\x2\x1CD\x61\x3\x2\x2\x2\x1CE\x1CF\x5\x94K\x2\x1CF\x1D0"+
		"\a\x32\x2\x2\x1D0\x1D1\x5~@\x2\x1D1\x1DB\x3\x2\x2\x2\x1D2\x1D3\x5\x94"+
		"K\x2\x1D3\x1D4\a\x32\x2\x2\x1D4\x1D5\x5\x84\x43\x2\x1D5\x1DB\x3\x2\x2"+
		"\x2\x1D6\x1D7\x5\x94K\x2\x1D7\x1D8\a\x32\x2\x2\x1D8\x1D9\x5`\x31\x2\x1D9"+
		"\x1DB\x3\x2\x2\x2\x1DA\x1CE\x3\x2\x2\x2\x1DA\x1D2\x3\x2\x2\x2\x1DA\x1D6"+
		"\x3\x2\x2\x2\x1DB\x63\x3\x2\x2\x2\x1DC\x1DD\x5\\/\x2\x1DD\x1DE\a\x32\x2"+
		"\x2\x1DE\x1DF\x5~@\x2\x1DF\x1E9\x3\x2\x2\x2\x1E0\x1E1\x5\\/\x2\x1E1\x1E2"+
		"\a\x32\x2\x2\x1E2\x1E3\x5\x84\x43\x2\x1E3\x1E9\x3\x2\x2\x2\x1E4\x1E5\x5"+
		"\\/\x2\x1E5\x1E6\a\x32\x2\x2\x1E6\x1E7\x5`\x31\x2\x1E7\x1E9\x3\x2\x2\x2"+
		"\x1E8\x1DC\x3\x2\x2\x2\x1E8\x1E0\x3\x2\x2\x2\x1E8\x1E4\x3\x2\x2\x2\x1E9"+
		"\x65\x3\x2\x2\x2\x1EA\x1EB\a+\x2\x2\x1EB\x1EC\x5\x94K\x2\x1EC\x1ED\a\x32"+
		"\x2\x2\x1ED\x1EE\x5\x94K\x2\x1EEg\x3\x2\x2\x2\x1EF\x1F1\a\v\x2\x2\x1F0"+
		"\x1F2\x5\x98M\x2\x1F1\x1F0\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2i\x3"+
		"\x2\x2\x2\x1F3\x1F4\a\f\x2\x2\x1F4\x1F9\x5\x94K\x2\x1F5\x1F6\a\x5\x2\x2"+
		"\x1F6\x1F8\x5\x94K\x2\x1F7\x1F5\x3\x2\x2\x2\x1F8\x1FB\x3\x2\x2\x2\x1F9"+
		"\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FAk\x3\x2\x2\x2\x1FB\x1F9\x3"+
		"\x2\x2\x2\x1FC\x1FD\a\r\x2\x2\x1FD\x202\x5n\x38\x2\x1FE\x1FF\a\x5\x2\x2"+
		"\x1FF\x201\x5n\x38\x2\x200\x1FE\x3\x2\x2\x2\x201\x204\x3\x2\x2\x2\x202"+
		"\x200\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203m\x3\x2\x2\x2\x204\x202\x3"+
		"\x2\x2\x2\x205\x208\a\x43\x2\x2\x206\x208\x5\x98M\x2\x207\x205\x3\x2\x2"+
		"\x2\x207\x206\x3\x2\x2\x2\x208o\x3\x2\x2\x2\x209\x20A\a\xE\x2\x2\x20A"+
		"\x20B\x5\x94K\x2\x20B\x20C\a,\x2\x2\x20C\x20D\x5r:\x2\x20D\x20E\a-\x2"+
		"\x2\x20Eq\x3\x2\x2\x2\x20F\x214\x5t;\x2\x210\x211\a\x5\x2\x2\x211\x213"+
		"\x5t;\x2\x212\x210\x3\x2\x2\x2\x213\x216\x3\x2\x2\x2\x214\x212\x3\x2\x2"+
		"\x2\x214\x215\x3\x2\x2\x2\x215\x219\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2"+
		"\x217\x219\x3\x2\x2\x2\x218\x20F\x3\x2\x2\x2\x218\x217\x3\x2\x2\x2\x219"+
		"s\x3\x2\x2\x2\x21A\x21B\x5\x98M\x2\x21Bu\x3\x2\x2\x2\x21C\x21D\x5\x94"+
		"K\x2\x21D\x21E\a,\x2\x2\x21E\x21F\x5r:\x2\x21F\x220\a-\x2\x2\x220w\x3"+
		"\x2\x2\x2\x221\x222\a\xF\x2\x2\x222\x223\a,\x2\x2\x223\x224\x5\x84\x43"+
		"\x2\x224\x225\a-\x2\x2\x225\x226\a\x10\x2\x2\x226\x227\x5\x44#\x2\x227"+
		"\x228\a(\x2\x2\x228\x240\x3\x2\x2\x2\x229\x22A\a\xF\x2\x2\x22A\x22B\a"+
		",\x2\x2\x22B\x22C\x5\x84\x43\x2\x22C\x22D\a-\x2\x2\x22D\x22E\a\x10\x2"+
		"\x2\x22E\x238\x5\x44#\x2\x22F\x230\a\x14\x2\x2\x230\x231\a,\x2\x2\x231"+
		"\x232\x5\x84\x43\x2\x232\x233\a-\x2\x2\x233\x234\a\x10\x2\x2\x234\x235"+
		"\x5\x44#\x2\x235\x237\x3\x2\x2\x2\x236\x22F\x3\x2\x2\x2\x237\x23A\x3\x2"+
		"\x2\x2\x238\x236\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23B\x3\x2\x2"+
		"\x2\x23A\x238\x3\x2\x2\x2\x23B\x23C\a\x11\x2\x2\x23C\x23D\x5\x44#\x2\x23D"+
		"\x23E\a(\x2\x2\x23E\x240\x3\x2\x2\x2\x23F\x221\x3\x2\x2\x2\x23F\x229\x3"+
		"\x2\x2\x2\x240y\x3\x2\x2\x2\x241\x242\a\x12\x2\x2\x242\x243\a,\x2\x2\x243"+
		"\x244\x5\x84\x43\x2\x244\x245\a-\x2\x2\x245\x246\a\x15\x2\x2\x246\x247"+
		"\x5\x44#\x2\x247\x248\a(\x2\x2\x248{\x3\x2\x2\x2\x249\x24A\a\x13\x2\x2"+
		"\x24A\x24B\x5\x44#\x2\x24B\x24C\a\x12\x2\x2\x24C\x24D\a,\x2\x2\x24D\x24E"+
		"\x5\x84\x43\x2\x24E\x24F\a-\x2\x2\x24F}\x3\x2\x2\x2\x250\x25A\x5\x80\x41"+
		"\x2\x251\x252\x5\x80\x41\x2\x252\x253\a\x17\x2\x2\x253\x254\x5~@\x2\x254"+
		"\x25A\x3\x2\x2\x2\x255\x256\x5\x80\x41\x2\x256\x257\a\x18\x2\x2\x257\x258"+
		"\x5~@\x2\x258\x25A\x3\x2\x2\x2\x259\x250\x3\x2\x2\x2\x259\x251\x3\x2\x2"+
		"\x2\x259\x255\x3\x2\x2\x2\x25A\x7F\x3\x2\x2\x2\x25B\x269\x5\x82\x42\x2"+
		"\x25C\x25D\x5\x82\x42\x2\x25D\x25E\a\x19\x2\x2\x25E\x25F\x5\x80\x41\x2"+
		"\x25F\x269\x3\x2\x2\x2\x260\x261\x5\x82\x42\x2\x261\x262\a\x1A\x2\x2\x262"+
		"\x263\x5\x80\x41\x2\x263\x269\x3\x2\x2\x2\x264\x265\x5\x82\x42\x2\x265"+
		"\x266\a\x1B\x2\x2\x266\x267\x5\x80\x41\x2\x267\x269\x3\x2\x2\x2\x268\x25B"+
		"\x3\x2\x2\x2\x268\x25C\x3\x2\x2\x2\x268\x260\x3\x2\x2\x2\x268\x264\x3"+
		"\x2\x2\x2\x269\x81\x3\x2\x2\x2\x26A\x274\x5\x92J\x2\x26B\x26C\a,\x2\x2"+
		"\x26C\x26D\x5~@\x2\x26D\x26E\a-\x2\x2\x26E\x274\x3\x2\x2\x2\x26F\x270"+
		"\a\x17\x2\x2\x270\x274\x5\x82\x42\x2\x271\x272\a\x18\x2\x2\x272\x274\x5"+
		"\x82\x42\x2\x273\x26A\x3\x2\x2\x2\x273\x26B\x3\x2\x2\x2\x273\x26F\x3\x2"+
		"\x2\x2\x273\x271\x3\x2\x2\x2\x274\x83\x3\x2\x2\x2\x275\x27B\x5\x86\x44"+
		"\x2\x276\x277\x5\x86\x44\x2\x277\x278\a\x1C\x2\x2\x278\x279\x5\x84\x43"+
		"\x2\x279\x27B\x3\x2\x2\x2\x27A\x275\x3\x2\x2\x2\x27A\x276\x3\x2\x2\x2"+
		"\x27B\x85\x3\x2\x2\x2\x27C\x282\x5\x88\x45\x2\x27D\x27E\x5\x88\x45\x2"+
		"\x27E\x27F\a\x1D\x2\x2\x27F\x280\x5\x86\x44\x2\x280\x282\x3\x2\x2\x2\x281"+
		"\x27C\x3\x2\x2\x2\x281\x27D\x3\x2\x2\x2\x282\x87\x3\x2\x2\x2\x283\x295"+
		"\x5\x8A\x46\x2\x284\x285\x5~@\x2\x285\x286\a\x1E\x2\x2\x286\x287\x5~@"+
		"\x2\x287\x295\x3\x2\x2\x2\x288\x289\x5\x8A\x46\x2\x289\x28A\a\x1E\x2\x2"+
		"\x28A\x28B\x5\x88\x45\x2\x28B\x295\x3\x2\x2\x2\x28C\x28D\x5~@\x2\x28D"+
		"\x28E\a\x1F\x2\x2\x28E\x28F\x5~@\x2\x28F\x295\x3\x2\x2\x2\x290\x291\x5"+
		"\x8A\x46\x2\x291\x292\a\x1F\x2\x2\x292\x293\x5\x88\x45\x2\x293\x295\x3"+
		"\x2\x2\x2\x294\x283\x3\x2\x2\x2\x294\x284\x3\x2\x2\x2\x294\x288\x3\x2"+
		"\x2\x2\x294\x28C\x3\x2\x2\x2\x294\x290\x3\x2\x2\x2\x295\x89\x3\x2\x2\x2"+
		"\x296\x2A8\x5\x8CG\x2\x297\x298\x5~@\x2\x298\x299\a \x2\x2\x299\x29A\x5"+
		"~@\x2\x29A\x2A8\x3\x2\x2\x2\x29B\x29C\x5~@\x2\x29C\x29D\a!\x2\x2\x29D"+
		"\x29E\x5~@\x2\x29E\x2A8\x3\x2\x2\x2\x29F\x2A0\x5~@\x2\x2A0\x2A1\a\"\x2"+
		"\x2\x2A1\x2A2\x5~@\x2\x2A2\x2A8\x3\x2\x2\x2\x2A3\x2A4\x5~@\x2\x2A4\x2A5"+
		"\a#\x2\x2\x2A5\x2A6\x5~@\x2\x2A6\x2A8\x3\x2\x2\x2\x2A7\x296\x3\x2\x2\x2"+
		"\x2A7\x297\x3\x2\x2\x2\x2A7\x29B\x3\x2\x2\x2\x2A7\x29F\x3\x2\x2\x2\x2A7"+
		"\x2A3\x3\x2\x2\x2\x2A8\x8B\x3\x2\x2\x2\x2A9\x2B6\x5\x92J\x2\x2AA\x2AB"+
		"\a$\x2\x2\x2AB\x2B6\x5\x92J\x2\x2AC\x2AD\a,\x2\x2\x2AD\x2AE\x5\x84\x43"+
		"\x2\x2AE\x2AF\a-\x2\x2\x2AF\x2B6\x3\x2\x2\x2\x2B0\x2B1\a$\x2\x2\x2B1\x2B2"+
		"\a,\x2\x2\x2B2\x2B3\x5\x84\x43\x2\x2B3\x2B4\a-\x2\x2\x2B4\x2B6\x3\x2\x2"+
		"\x2\x2B5\x2A9\x3\x2\x2\x2\x2B5\x2AA\x3\x2\x2\x2\x2B5\x2AC\x3\x2\x2\x2"+
		"\x2B5\x2B0\x3\x2\x2\x2\x2B6\x8D\x3\x2\x2\x2\x2B7\x2B8\a\x33\x2\x2\x2B8"+
		"\x2B9\a,\x2\x2\x2B9\x2BA\x5\x94K\x2\x2BA\x2BB\a-\x2\x2\x2BB\x8F\x3\x2"+
		"\x2\x2\x2BC\x2BF\x5\x8EH\x2\x2BD\x2BF\a\x34\x2\x2\x2BE\x2BC\x3\x2\x2\x2"+
		"\x2BE\x2BD\x3\x2\x2\x2\x2BF\x91\x3\x2\x2\x2\x2C0\x2CA\x5p\x39\x2\x2C1"+
		"\x2CA\x5^\x30\x2\x2C2\x2CA\x5\\/\x2\x2C3\x2CA\x5\x94K\x2\x2C4\x2CA\t\x2"+
		"\x2\x2\x2C5\x2CA\x5v<\x2\x2C6\x2CA\a\x43\x2\x2\x2C7\x2CA\x5\x90I\x2\x2C8"+
		"\x2CA\x5\x96L\x2\x2C9\x2C0\x3\x2\x2\x2\x2C9\x2C1\x3\x2\x2\x2\x2C9\x2C2"+
		"\x3\x2\x2\x2\x2C9\x2C3\x3\x2\x2\x2\x2C9\x2C4\x3\x2\x2\x2\x2C9\x2C5\x3"+
		"\x2\x2\x2\x2C9\x2C6\x3\x2\x2\x2\x2C9\x2C7\x3\x2\x2\x2\x2C9\x2C8\x3\x2"+
		"\x2\x2\x2CA\x93\x3\x2\x2\x2\x2CB\x2CC\a\x42\x2\x2\x2CC\x2CE\a\x6\x2\x2"+
		"\x2CD\x2CB\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF"+
		"\x2D0\a\x42\x2\x2\x2D0\x95\x3\x2\x2\x2\x2D1\x2DA\a\x30\x2\x2\x2D2\x2D7"+
		"\x5\x92J\x2\x2D3\x2D4\a\x5\x2\x2\x2D4\x2D6\x5\x92J\x2\x2D5\x2D3\x3\x2"+
		"\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2"+
		"\x2\x2D8\x2DB\x3\x2\x2\x2\x2D9\x2D7\x3\x2\x2\x2\x2DA\x2D2\x3\x2\x2\x2"+
		"\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\a\x31\x2\x2\x2DD"+
		"\x97\x3\x2\x2\x2\x2DE\x2E1\x5~@\x2\x2DF\x2E1\x5\x84\x43\x2\x2E0\x2DE\x3"+
		"\x2\x2\x2\x2E0\x2DF\x3\x2\x2\x2\x2E1\x99\x3\x2\x2\x2\x2E2\x2E3\a\x16\x2"+
		"\x2\x2E3\x2E4\x5\x9CO\x2\x2E4\x2E5\a(\x2\x2\x2E5\x9B\x3\x2\x2\x2\x2E6"+
		"\x2E8\v\x2\x2\x2\x2E7\x2E6\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2\x2E9\x2EA"+
		"\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2EA\x9D\x3\x2\x2\x2\x2EB\x2E9\x3\x2"+
		"\x2\x2<\xA0\xA7\xAD\xB1\xC3\xCE\xDA\xDC\xEC\xEE\xF2\xF9\x106\x108\x10F"+
		"\x129\x136\x15D\x161\x171\x173\x178\x181\x188\x18C\x194\x199\x1A2\x1A8"+
		"\x1AE\x1B4\x1C0\x1CC\x1DA\x1E8\x1F1\x1F9\x202\x207\x214\x218\x238\x23F"+
		"\x259\x268\x273\x27A\x281\x294\x2A7\x2B5\x2BE\x2C9\x2CD\x2D7\x2DA\x2E0"+
		"\x2E9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SemanticLanguageGrammar
