//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SemanticLanguageGrammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SLGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public interface ISLGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpSum</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathExpSum([NotNull] SLGrammarParser.MathExpSumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpSum</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathExpSum([NotNull] SLGrammarParser.MathExpSumContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpSub</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathExpSub([NotNull] SLGrammarParser.MathExpSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpSub</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathExpSub([NotNull] SLGrammarParser.MathExpSubContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathExpEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathExpEmpty([NotNull] SLGrammarParser.MathExpEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathExpEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathExpEmpty([NotNull] SLGrammarParser.MathExpEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Bigger</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBigger([NotNull] SLGrammarParser.BiggerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Bigger</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBigger([NotNull] SLGrammarParser.BiggerContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLesser([NotNull] SLGrammarParser.LesserContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLesser([NotNull] SLGrammarParser.LesserContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LesserOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLesserOrEqual([NotNull] SLGrammarParser.LesserOrEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LesserOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLesserOrEqual([NotNull] SLGrammarParser.LesserOrEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolInequalityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolInequalityEmpty([NotNull] SLGrammarParser.BoolInequalityEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolInequalityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolInequalityEmpty([NotNull] SLGrammarParser.BoolInequalityEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BiggerOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBiggerOrEqual([NotNull] SLGrammarParser.BiggerOrEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BiggerOrEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBiggerOrEqual([NotNull] SLGrammarParser.BiggerOrEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LogicOr</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicOr([NotNull] SLGrammarParser.LogicOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicOr</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicOr([NotNull] SLGrammarParser.LogicOrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolOrEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolOrEmpty([NotNull] SLGrammarParser.BoolOrEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolOrEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolOrEmpty([NotNull] SLGrammarParser.BoolOrEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorUnaryMinus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathFactorUnaryMinus([NotNull] SLGrammarParser.MathFactorUnaryMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorUnaryMinus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathFactorUnaryMinus([NotNull] SLGrammarParser.MathFactorUnaryMinusContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathFactorBrackets([NotNull] SLGrammarParser.MathFactorBracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathFactorBrackets([NotNull] SLGrammarParser.MathFactorBracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathFactorEmpty([NotNull] SLGrammarParser.MathFactorEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathFactorEmpty([NotNull] SLGrammarParser.MathFactorEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathFactorUnaryPlus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathFactorUnaryPlus([NotNull] SLGrammarParser.MathFactorUnaryPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFactorUnaryPlus</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathFactorUnaryPlus([NotNull] SLGrammarParser.MathFactorUnaryPlusContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAndEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAndEmpty([NotNull] SLGrammarParser.BoolAndEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAndEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAndEmpty([NotNull] SLGrammarParser.BoolAndEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LogicAnd</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicAnd([NotNull] SLGrammarParser.LogicAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicAnd</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicAnd([NotNull] SLGrammarParser.LogicAndContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAtomBrackets([NotNull] SLGrammarParser.BoolAtomBracketsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomBrackets</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAtomBrackets([NotNull] SLGrammarParser.BoolAtomBracketsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] SLGrammarParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] SLGrammarParser.NotContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAtomEmpty([NotNull] SLGrammarParser.BoolAtomEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAtomEmpty([NotNull] SLGrammarParser.BoolAtomEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolAtomBracketsNot</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAtomBracketsNot([NotNull] SLGrammarParser.BoolAtomBracketsNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolAtomBracketsNot</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAtomBracketsNot([NotNull] SLGrammarParser.BoolAtomBracketsNotContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IfElseIfElse</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfElseIfElse([NotNull] SLGrammarParser.IfElseIfElseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfElseIfElse</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfElseIfElse([NotNull] SLGrammarParser.IfElseIfElseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IfSingle</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfSingle([NotNull] SLGrammarParser.IfSingleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfSingle</c>
	/// labeled alternative in <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfSingle([NotNull] SLGrammarParser.IfSingleContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolEqualityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolEqualityEmpty([NotNull] SLGrammarParser.BoolEqualityEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolEqualityEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolEqualityEmpty([NotNull] SLGrammarParser.BoolEqualityEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathNotEqual([NotNull] SLGrammarParser.MathNotEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathNotEqual([NotNull] SLGrammarParser.MathNotEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolNotEqual([NotNull] SLGrammarParser.BoolNotEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolNotEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolNotEqual([NotNull] SLGrammarParser.BoolNotEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BoolEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolEqual([NotNull] SLGrammarParser.BoolEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolEqual([NotNull] SLGrammarParser.BoolEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathEqual([NotNull] SLGrammarParser.MathEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathEqual</c>
	/// labeled alternative in <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathEqual([NotNull] SLGrammarParser.MathEqualContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermDiv</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathTermDiv([NotNull] SLGrammarParser.MathTermDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermDiv</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathTermDiv([NotNull] SLGrammarParser.MathTermDivContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermMod</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathTermMod([NotNull] SLGrammarParser.MathTermModContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermMod</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathTermMod([NotNull] SLGrammarParser.MathTermModContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermMul</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathTermMul([NotNull] SLGrammarParser.MathTermMulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermMul</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathTermMul([NotNull] SLGrammarParser.MathTermMulContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MathTermEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathTermEmpty([NotNull] SLGrammarParser.MathTermEmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MathTermEmpty</c>
	/// labeled alternative in <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathTermEmpty([NotNull] SLGrammarParser.MathTermEmptyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] SLGrammarParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] SLGrammarParser.TypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrType([NotNull] SLGrammarParser.PtrTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrType([NotNull] SLGrammarParser.PtrTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarType([NotNull] SLGrammarParser.ScalarTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarType([NotNull] SLGrammarParser.ScalarTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionalType([NotNull] SLGrammarParser.FunctionalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionalType([NotNull] SLGrammarParser.FunctionalTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleType([NotNull] SLGrammarParser.SimpleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleType([NotNull] SLGrammarParser.SimpleTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] SLGrammarParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] SLGrammarParser.FunctionTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureType([NotNull] SLGrammarParser.ProcedureTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureType([NotNull] SLGrammarParser.ProcedureTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionalArgList([NotNull] SLGrammarParser.FunctionalArgListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionalArgList([NotNull] SLGrammarParser.FunctionalArgListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionalArg([NotNull] SLGrammarParser.FunctionalArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionalArg([NotNull] SLGrammarParser.FunctionalArgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] SLGrammarParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] SLGrammarParser.ArrayTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDimention"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDimention([NotNull] SLGrammarParser.ArrayDimentionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDimention"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDimention([NotNull] SLGrammarParser.ArrayDimentionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStart([NotNull] SLGrammarParser.StartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStart([NotNull] SLGrammarParser.StartContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleImportList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleImportList([NotNull] SLGrammarParser.ModuleImportListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleImportList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleImportList([NotNull] SLGrammarParser.ModuleImportListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleImport"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleImport([NotNull] SLGrammarParser.ModuleImportContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleImport"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleImport([NotNull] SLGrammarParser.ModuleImportContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule([NotNull] SLGrammarParser.ModuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule([NotNull] SLGrammarParser.ModuleContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleDeclare([NotNull] SLGrammarParser.ModuleDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleDeclare([NotNull] SLGrammarParser.ModuleDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.base_head"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_head([NotNull] SLGrammarParser.Base_headContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.base_head"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_head([NotNull] SLGrammarParser.Base_headContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.inherit_head"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInherit_head([NotNull] SLGrammarParser.Inherit_headContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.inherit_head"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInherit_head([NotNull] SLGrammarParser.Inherit_headContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.classDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclare([NotNull] SLGrammarParser.ClassDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.classDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclare([NotNull] SLGrammarParser.ClassDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.classStatements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassStatements([NotNull] SLGrammarParser.ClassStatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.classStatements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassStatements([NotNull] SLGrammarParser.ClassStatementsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclare([NotNull] SLGrammarParser.MethodDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclare([NotNull] SLGrammarParser.MethodDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.thisHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisHeader([NotNull] SLGrammarParser.ThisHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.thisHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisHeader([NotNull] SLGrammarParser.ThisHeaderContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodFuncAbstract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodFuncAbstract([NotNull] SLGrammarParser.MethodFuncAbstractContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodFuncAbstract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodFuncAbstract([NotNull] SLGrammarParser.MethodFuncAbstractContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodProcAbstract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodProcAbstract([NotNull] SLGrammarParser.MethodProcAbstractContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodProcAbstract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodProcAbstract([NotNull] SLGrammarParser.MethodProcAbstractContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodFuncDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodFuncDeclare([NotNull] SLGrammarParser.MethodFuncDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodFuncDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodFuncDeclare([NotNull] SLGrammarParser.MethodFuncDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.methodProcDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodProcDeclare([NotNull] SLGrammarParser.MethodProcDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.methodProcDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodProcDeclare([NotNull] SLGrammarParser.MethodProcDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.fieldDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldDeclare([NotNull] SLGrammarParser.FieldDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.fieldDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldDeclare([NotNull] SLGrammarParser.FieldDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclare([NotNull] SLGrammarParser.FunctionDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclare([NotNull] SLGrammarParser.FunctionDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.procedureDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureDeclare([NotNull] SLGrammarParser.ProcedureDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.procedureDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureDeclare([NotNull] SLGrammarParser.ProcedureDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.varModuleDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarModuleDeclare([NotNull] SLGrammarParser.VarModuleDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.varModuleDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarModuleDeclare([NotNull] SLGrammarParser.VarModuleDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionalDeclareArgList([NotNull] SLGrammarParser.FunctionalDeclareArgListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionalDeclareArgList([NotNull] SLGrammarParser.FunctionalDeclareArgListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionalDeclareArg([NotNull] SLGrammarParser.FunctionalDeclareArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.functionalDeclareArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionalDeclareArg([NotNull] SLGrammarParser.FunctionalDeclareArgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.moduleEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleEntry([NotNull] SLGrammarParser.ModuleEntryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.moduleEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleEntry([NotNull] SLGrammarParser.ModuleEntryContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.statementSeq"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementSeq([NotNull] SLGrammarParser.StatementSeqContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.statementSeq"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementSeq([NotNull] SLGrammarParser.StatementSeqContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] SLGrammarParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] SLGrammarParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleStatement([NotNull] SLGrammarParser.SimpleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleStatement([NotNull] SLGrammarParser.SimpleStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.complexStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComplexStatement([NotNull] SLGrammarParser.ComplexStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.complexStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComplexStatement([NotNull] SLGrammarParser.ComplexStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.declare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclare([NotNull] SLGrammarParser.DeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.declare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclare([NotNull] SLGrammarParser.DeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.constDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstDeclare([NotNull] SLGrammarParser.ConstDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.constDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstDeclare([NotNull] SLGrammarParser.ConstDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.varDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclare([NotNull] SLGrammarParser.VarDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.varDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclare([NotNull] SLGrammarParser.VarDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.scalarDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarDeclare([NotNull] SLGrammarParser.ScalarDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.scalarDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarDeclare([NotNull] SLGrammarParser.ScalarDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclare([NotNull] SLGrammarParser.ArrayDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclare([NotNull] SLGrammarParser.ArrayDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrDeclare([NotNull] SLGrammarParser.PtrDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrDeclare([NotNull] SLGrammarParser.PtrDeclareContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclareType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclareType([NotNull] SLGrammarParser.ArrayDeclareTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclareType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclareType([NotNull] SLGrammarParser.ArrayDeclareTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayDeclareDimention"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDeclareDimention([NotNull] SLGrammarParser.ArrayDeclareDimentionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayDeclareDimention"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDeclareDimention([NotNull] SLGrammarParser.ArrayDeclareDimentionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayElement([NotNull] SLGrammarParser.ArrayElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayElement([NotNull] SLGrammarParser.ArrayElementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayLenProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLenProperty([NotNull] SLGrammarParser.ArrayLenPropertyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayLenProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLenProperty([NotNull] SLGrammarParser.ArrayLenPropertyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.let"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLet([NotNull] SLGrammarParser.LetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.let"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLet([NotNull] SLGrammarParser.LetContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.simpleLet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleLet([NotNull] SLGrammarParser.SimpleLetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.simpleLet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleLet([NotNull] SLGrammarParser.SimpleLetContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.arrayLet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLet([NotNull] SLGrammarParser.ArrayLetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.arrayLet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLet([NotNull] SLGrammarParser.ArrayLetContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.using"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsing([NotNull] SLGrammarParser.UsingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.using"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsing([NotNull] SLGrammarParser.UsingContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.return_val"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_val([NotNull] SLGrammarParser.Return_valContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.return_val"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_val([NotNull] SLGrammarParser.Return_valContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInput([NotNull] SLGrammarParser.InputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInput([NotNull] SLGrammarParser.InputContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.output"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutput([NotNull] SLGrammarParser.OutputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.output"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutput([NotNull] SLGrammarParser.OutputContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.outputArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutputArgument([NotNull] SLGrammarParser.OutputArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.outputArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutputArgument([NotNull] SLGrammarParser.OutputArgumentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] SLGrammarParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] SLGrammarParser.CallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.callArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallArgList([NotNull] SLGrammarParser.CallArgListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.callArgList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallArgList([NotNull] SLGrammarParser.CallArgListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.callArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallArg([NotNull] SLGrammarParser.CallArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.callArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallArg([NotNull] SLGrammarParser.CallArgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.call_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall_func([NotNull] SLGrammarParser.Call_funcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.call_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall_func([NotNull] SLGrammarParser.Call_funcContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_cond([NotNull] SLGrammarParser.If_condContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.if_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_cond([NotNull] SLGrammarParser.If_condContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.while_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_cond([NotNull] SLGrammarParser.While_condContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.while_cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_cond([NotNull] SLGrammarParser.While_condContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.repeat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeat([NotNull] SLGrammarParser.RepeatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.repeat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeat([NotNull] SLGrammarParser.RepeatContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathExpression([NotNull] SLGrammarParser.MathExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathExpression([NotNull] SLGrammarParser.MathExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathTerm([NotNull] SLGrammarParser.MathTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathTerm([NotNull] SLGrammarParser.MathTermContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathFactor([NotNull] SLGrammarParser.MathFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.mathFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathFactor([NotNull] SLGrammarParser.MathFactorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] SLGrammarParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] SLGrammarParser.BoolExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolAnd([NotNull] SLGrammarParser.BoolAndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolAnd([NotNull] SLGrammarParser.BoolAndContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolEquality([NotNull] SLGrammarParser.BoolEqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolEquality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolEquality([NotNull] SLGrammarParser.BoolEqualityContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolInequality([NotNull] SLGrammarParser.BoolInequalityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolInequality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolInequality([NotNull] SLGrammarParser.BoolInequalityContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolFactor([NotNull] SLGrammarParser.BoolFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.boolFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolFactor([NotNull] SLGrammarParser.BoolFactorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.newExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExp([NotNull] SLGrammarParser.NewExpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.newExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExp([NotNull] SLGrammarParser.NewExpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.ptrExpAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrExpAtom([NotNull] SLGrammarParser.PtrExpAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.ptrExpAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrExpAtom([NotNull] SLGrammarParser.PtrExpAtomContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.expAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpAtom([NotNull] SLGrammarParser.ExpAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.expAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpAtom([NotNull] SLGrammarParser.ExpAtomContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] SLGrammarParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] SLGrammarParser.IdContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray([NotNull] SLGrammarParser.ArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray([NotNull] SLGrammarParser.ArrayContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExp([NotNull] SLGrammarParser.ExpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExp([NotNull] SLGrammarParser.ExpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.raw"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaw([NotNull] SLGrammarParser.RawContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.raw"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaw([NotNull] SLGrammarParser.RawContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="SLGrammarParser.any"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAny([NotNull] SLGrammarParser.AnyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SLGrammarParser.any"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAny([NotNull] SLGrammarParser.AnyContext context);
}
} // namespace SemanticLanguageGrammar
